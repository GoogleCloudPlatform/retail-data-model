// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.10
// source: api/enums/country.proto

package enums

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Country int32

const (
	Country_UNKNOWN Country = 0
	Country_AFG     Country = 1
	Country_ALB     Country = 2
	Country_DZA     Country = 3
	Country_ASM     Country = 4
	Country_AND     Country = 5
	Country_AGO     Country = 6
	Country_AIA     Country = 7
	Country_ATA     Country = 8
	Country_ATG     Country = 9
	Country_ARG     Country = 10
	Country_ARM     Country = 11
	Country_ABW     Country = 12
	Country_AUS     Country = 13
	Country_AUT     Country = 14
	Country_AZE     Country = 15
	Country_BHS     Country = 16
	Country_BHR     Country = 17
	Country_BGD     Country = 18
	Country_BRB     Country = 19
	Country_BLR     Country = 20
	Country_BEL     Country = 21
	Country_BLZ     Country = 22
	Country_BEN     Country = 23
	Country_BMU     Country = 24
	Country_BTN     Country = 25
	Country_BOL     Country = 26
	Country_BIH     Country = 28
	Country_BWA     Country = 29
	Country_BVT     Country = 30
	Country_BRA     Country = 31
	Country_IOT     Country = 32
	Country_BRN     Country = 33
	Country_BGR     Country = 34
	Country_BFA     Country = 35
	Country_BDI     Country = 36
	Country_CPV     Country = 37
	Country_KHM     Country = 38
	Country_CMR     Country = 39
	Country_CAN     Country = 40
	Country_CYM     Country = 41
	Country_CAF     Country = 42
	Country_TCD     Country = 43
	Country_CHL     Country = 44
	Country_CHN     Country = 45
	Country_CXR     Country = 46
	Country_CCK     Country = 47
	Country_COL     Country = 48
	Country_COM     Country = 49
	Country_COD     Country = 50
	Country_COG     Country = 51
	Country_COK     Country = 52
	Country_CRI     Country = 53
	Country_HRV     Country = 54
	Country_CUB     Country = 55
	Country_CUW     Country = 56
	Country_CYP     Country = 57
	Country_CZE     Country = 58
	Country_CIV     Country = 59
	Country_DNK     Country = 60
	Country_DJI     Country = 61
	Country_DMA     Country = 62
	Country_DOM     Country = 63
	Country_ECU     Country = 64
	Country_EGY     Country = 65
	Country_SLV     Country = 66
	Country_GNQ     Country = 67
	Country_ERI     Country = 68
	Country_EST     Country = 69
	Country_SWZ     Country = 70
	Country_ETH     Country = 71
	Country_FLK     Country = 72
	Country_FRO     Country = 73
	Country_FJI     Country = 74
	Country_FIN     Country = 75
	Country_FRA     Country = 76
	Country_GUF     Country = 77
	Country_PYF     Country = 78
	Country_ATF     Country = 79
	Country_GAB     Country = 80
	Country_GMB     Country = 81
	Country_GEO     Country = 82
	Country_DEU     Country = 83
	Country_GHA     Country = 84
	Country_GIB     Country = 85
	Country_GRC     Country = 86
	Country_GRL     Country = 87
	Country_GRD     Country = 88
	Country_GLP     Country = 89
	Country_GUM     Country = 90
	Country_GTM     Country = 91
	Country_GGY     Country = 92
	Country_GIN     Country = 93
	Country_GNB     Country = 94
	Country_GUY     Country = 95
	Country_HTI     Country = 96
	Country_HMD     Country = 97
	Country_VAT     Country = 98
	Country_HND     Country = 99
	Country_HKG     Country = 100
	Country_HUN     Country = 101
	Country_ISL     Country = 102
	Country_IND     Country = 103
	Country_IDN     Country = 104
	Country_IRN     Country = 105
	Country_IRQ     Country = 106
	Country_IRL     Country = 107
	Country_IMN     Country = 108
	Country_ISR     Country = 109
	Country_ITA     Country = 110
	Country_JAM     Country = 111
	Country_JPN     Country = 112
	Country_JEY     Country = 113
	Country_JOR     Country = 114
	Country_KAZ     Country = 115
	Country_KEN     Country = 116
	Country_KIR     Country = 117
	Country_PRK     Country = 118
	Country_KOR     Country = 119
	Country_KWT     Country = 120
	Country_KGZ     Country = 121
	Country_LAO     Country = 122
	Country_LVA     Country = 123
	Country_LBN     Country = 124
	Country_LSO     Country = 125
	Country_LBR     Country = 126
	Country_LBY     Country = 127
	Country_LIE     Country = 128
	Country_LTU     Country = 129
	Country_LUX     Country = 130
	Country_MAC     Country = 131
	Country_MDG     Country = 132
	Country_MWI     Country = 133
	Country_MYS     Country = 134
	Country_MDV     Country = 135
	Country_MLI     Country = 136
	Country_MLT     Country = 137
	Country_MHL     Country = 138
	Country_MTQ     Country = 139
	Country_MRT     Country = 140
	Country_MUS     Country = 141
	Country_MYT     Country = 142
	Country_MEX     Country = 143
	Country_FSM     Country = 144
	Country_MDA     Country = 145
	Country_MCO     Country = 146
	Country_MNG     Country = 147
	Country_MNE     Country = 148
	Country_MSR     Country = 149
	Country_MAR     Country = 150
	Country_MOZ     Country = 151
	Country_MMR     Country = 152
	Country_NAM     Country = 153
	Country_NRU     Country = 154
	Country_NPL     Country = 155
	Country_NLD     Country = 156
	Country_NCL     Country = 157
	Country_NZL     Country = 158
	Country_NIC     Country = 159
	Country_NER     Country = 160
	Country_NGA     Country = 161
	Country_NIU     Country = 162
	Country_NFK     Country = 163
	Country_MNP     Country = 164
	Country_NOR     Country = 165
	Country_OMN     Country = 166
	Country_PAK     Country = 167
	Country_PLW     Country = 168
	Country_PAN     Country = 170
	Country_PNG     Country = 171
	Country_PRY     Country = 172
	Country_PER     Country = 173
	Country_PHL     Country = 174
	Country_PCN     Country = 175
	Country_POL     Country = 176
	Country_PRT     Country = 177
	Country_PRI     Country = 178
	Country_QAT     Country = 179
	Country_MKD     Country = 180
	Country_ROU     Country = 181
	Country_RUS     Country = 182
	Country_RWA     Country = 183
	Country_REU     Country = 184
	Country_BLM     Country = 185
	Country_KNA     Country = 187
	Country_LCA     Country = 188
	Country_MAF     Country = 189
	Country_SPM     Country = 190
	Country_VCT     Country = 191
	Country_WSM     Country = 192
	Country_SMR     Country = 193
	Country_STP     Country = 194
	Country_SAU     Country = 195
	Country_SEN     Country = 196
	Country_SRB     Country = 197
	Country_SYC     Country = 198
	Country_SLE     Country = 199
	Country_SGP     Country = 200
	Country_SXM     Country = 201
	Country_SVK     Country = 202
	Country_SVN     Country = 203
	Country_SLB     Country = 204
	Country_SOM     Country = 205
	Country_ZAF     Country = 206
	Country_SGS     Country = 207
	Country_SSD     Country = 208
	Country_ESP     Country = 209
	Country_LKA     Country = 210
	Country_SDN     Country = 211
	Country_SUR     Country = 212
	Country_SJM     Country = 213
	Country_SWE     Country = 214
	Country_CHE     Country = 215
	Country_SYR     Country = 216
	Country_TWN     Country = 217
	Country_TJK     Country = 218
	Country_THA     Country = 220
	Country_TLS     Country = 221
	Country_TGO     Country = 222
	Country_TKL     Country = 223
	Country_TON     Country = 224
	Country_TTO     Country = 225
	Country_TUN     Country = 226
	Country_TUR     Country = 227
	Country_TKM     Country = 228
	Country_TCA     Country = 229
	Country_TUV     Country = 230
	Country_UGA     Country = 231
	Country_UKR     Country = 232
	Country_ARE     Country = 233
	Country_GBR     Country = 234
	Country_UMI     Country = 235
	Country_USA     Country = 236
	Country_URY     Country = 237
	Country_UZB     Country = 238
	Country_VUT     Country = 239
	Country_VEN     Country = 240
	Country_VNM     Country = 241
	Country_VGB     Country = 242
	Country_VIR     Country = 243
	Country_WLF     Country = 244
	Country_ESH     Country = 245
	Country_YEM     Country = 246
	Country_ZMB     Country = 247
	Country_ZWE     Country = 248
	Country_ALA     Country = 249
)

// Enum value maps for Country.
var (
	Country_name = map[int32]string{
		0:   "UNKNOWN",
		1:   "AFG",
		2:   "ALB",
		3:   "DZA",
		4:   "ASM",
		5:   "AND",
		6:   "AGO",
		7:   "AIA",
		8:   "ATA",
		9:   "ATG",
		10:  "ARG",
		11:  "ARM",
		12:  "ABW",
		13:  "AUS",
		14:  "AUT",
		15:  "AZE",
		16:  "BHS",
		17:  "BHR",
		18:  "BGD",
		19:  "BRB",
		20:  "BLR",
		21:  "BEL",
		22:  "BLZ",
		23:  "BEN",
		24:  "BMU",
		25:  "BTN",
		26:  "BOL",
		28:  "BIH",
		29:  "BWA",
		30:  "BVT",
		31:  "BRA",
		32:  "IOT",
		33:  "BRN",
		34:  "BGR",
		35:  "BFA",
		36:  "BDI",
		37:  "CPV",
		38:  "KHM",
		39:  "CMR",
		40:  "CAN",
		41:  "CYM",
		42:  "CAF",
		43:  "TCD",
		44:  "CHL",
		45:  "CHN",
		46:  "CXR",
		47:  "CCK",
		48:  "COL",
		49:  "COM",
		50:  "COD",
		51:  "COG",
		52:  "COK",
		53:  "CRI",
		54:  "HRV",
		55:  "CUB",
		56:  "CUW",
		57:  "CYP",
		58:  "CZE",
		59:  "CIV",
		60:  "DNK",
		61:  "DJI",
		62:  "DMA",
		63:  "DOM",
		64:  "ECU",
		65:  "EGY",
		66:  "SLV",
		67:  "GNQ",
		68:  "ERI",
		69:  "EST",
		70:  "SWZ",
		71:  "ETH",
		72:  "FLK",
		73:  "FRO",
		74:  "FJI",
		75:  "FIN",
		76:  "FRA",
		77:  "GUF",
		78:  "PYF",
		79:  "ATF",
		80:  "GAB",
		81:  "GMB",
		82:  "GEO",
		83:  "DEU",
		84:  "GHA",
		85:  "GIB",
		86:  "GRC",
		87:  "GRL",
		88:  "GRD",
		89:  "GLP",
		90:  "GUM",
		91:  "GTM",
		92:  "GGY",
		93:  "GIN",
		94:  "GNB",
		95:  "GUY",
		96:  "HTI",
		97:  "HMD",
		98:  "VAT",
		99:  "HND",
		100: "HKG",
		101: "HUN",
		102: "ISL",
		103: "IND",
		104: "IDN",
		105: "IRN",
		106: "IRQ",
		107: "IRL",
		108: "IMN",
		109: "ISR",
		110: "ITA",
		111: "JAM",
		112: "JPN",
		113: "JEY",
		114: "JOR",
		115: "KAZ",
		116: "KEN",
		117: "KIR",
		118: "PRK",
		119: "KOR",
		120: "KWT",
		121: "KGZ",
		122: "LAO",
		123: "LVA",
		124: "LBN",
		125: "LSO",
		126: "LBR",
		127: "LBY",
		128: "LIE",
		129: "LTU",
		130: "LUX",
		131: "MAC",
		132: "MDG",
		133: "MWI",
		134: "MYS",
		135: "MDV",
		136: "MLI",
		137: "MLT",
		138: "MHL",
		139: "MTQ",
		140: "MRT",
		141: "MUS",
		142: "MYT",
		143: "MEX",
		144: "FSM",
		145: "MDA",
		146: "MCO",
		147: "MNG",
		148: "MNE",
		149: "MSR",
		150: "MAR",
		151: "MOZ",
		152: "MMR",
		153: "NAM",
		154: "NRU",
		155: "NPL",
		156: "NLD",
		157: "NCL",
		158: "NZL",
		159: "NIC",
		160: "NER",
		161: "NGA",
		162: "NIU",
		163: "NFK",
		164: "MNP",
		165: "NOR",
		166: "OMN",
		167: "PAK",
		168: "PLW",
		170: "PAN",
		171: "PNG",
		172: "PRY",
		173: "PER",
		174: "PHL",
		175: "PCN",
		176: "POL",
		177: "PRT",
		178: "PRI",
		179: "QAT",
		180: "MKD",
		181: "ROU",
		182: "RUS",
		183: "RWA",
		184: "REU",
		185: "BLM",
		187: "KNA",
		188: "LCA",
		189: "MAF",
		190: "SPM",
		191: "VCT",
		192: "WSM",
		193: "SMR",
		194: "STP",
		195: "SAU",
		196: "SEN",
		197: "SRB",
		198: "SYC",
		199: "SLE",
		200: "SGP",
		201: "SXM",
		202: "SVK",
		203: "SVN",
		204: "SLB",
		205: "SOM",
		206: "ZAF",
		207: "SGS",
		208: "SSD",
		209: "ESP",
		210: "LKA",
		211: "SDN",
		212: "SUR",
		213: "SJM",
		214: "SWE",
		215: "CHE",
		216: "SYR",
		217: "TWN",
		218: "TJK",
		220: "THA",
		221: "TLS",
		222: "TGO",
		223: "TKL",
		224: "TON",
		225: "TTO",
		226: "TUN",
		227: "TUR",
		228: "TKM",
		229: "TCA",
		230: "TUV",
		231: "UGA",
		232: "UKR",
		233: "ARE",
		234: "GBR",
		235: "UMI",
		236: "USA",
		237: "URY",
		238: "UZB",
		239: "VUT",
		240: "VEN",
		241: "VNM",
		242: "VGB",
		243: "VIR",
		244: "WLF",
		245: "ESH",
		246: "YEM",
		247: "ZMB",
		248: "ZWE",
		249: "ALA",
	}
	Country_value = map[string]int32{
		"UNKNOWN": 0,
		"AFG":     1,
		"ALB":     2,
		"DZA":     3,
		"ASM":     4,
		"AND":     5,
		"AGO":     6,
		"AIA":     7,
		"ATA":     8,
		"ATG":     9,
		"ARG":     10,
		"ARM":     11,
		"ABW":     12,
		"AUS":     13,
		"AUT":     14,
		"AZE":     15,
		"BHS":     16,
		"BHR":     17,
		"BGD":     18,
		"BRB":     19,
		"BLR":     20,
		"BEL":     21,
		"BLZ":     22,
		"BEN":     23,
		"BMU":     24,
		"BTN":     25,
		"BOL":     26,
		"BIH":     28,
		"BWA":     29,
		"BVT":     30,
		"BRA":     31,
		"IOT":     32,
		"BRN":     33,
		"BGR":     34,
		"BFA":     35,
		"BDI":     36,
		"CPV":     37,
		"KHM":     38,
		"CMR":     39,
		"CAN":     40,
		"CYM":     41,
		"CAF":     42,
		"TCD":     43,
		"CHL":     44,
		"CHN":     45,
		"CXR":     46,
		"CCK":     47,
		"COL":     48,
		"COM":     49,
		"COD":     50,
		"COG":     51,
		"COK":     52,
		"CRI":     53,
		"HRV":     54,
		"CUB":     55,
		"CUW":     56,
		"CYP":     57,
		"CZE":     58,
		"CIV":     59,
		"DNK":     60,
		"DJI":     61,
		"DMA":     62,
		"DOM":     63,
		"ECU":     64,
		"EGY":     65,
		"SLV":     66,
		"GNQ":     67,
		"ERI":     68,
		"EST":     69,
		"SWZ":     70,
		"ETH":     71,
		"FLK":     72,
		"FRO":     73,
		"FJI":     74,
		"FIN":     75,
		"FRA":     76,
		"GUF":     77,
		"PYF":     78,
		"ATF":     79,
		"GAB":     80,
		"GMB":     81,
		"GEO":     82,
		"DEU":     83,
		"GHA":     84,
		"GIB":     85,
		"GRC":     86,
		"GRL":     87,
		"GRD":     88,
		"GLP":     89,
		"GUM":     90,
		"GTM":     91,
		"GGY":     92,
		"GIN":     93,
		"GNB":     94,
		"GUY":     95,
		"HTI":     96,
		"HMD":     97,
		"VAT":     98,
		"HND":     99,
		"HKG":     100,
		"HUN":     101,
		"ISL":     102,
		"IND":     103,
		"IDN":     104,
		"IRN":     105,
		"IRQ":     106,
		"IRL":     107,
		"IMN":     108,
		"ISR":     109,
		"ITA":     110,
		"JAM":     111,
		"JPN":     112,
		"JEY":     113,
		"JOR":     114,
		"KAZ":     115,
		"KEN":     116,
		"KIR":     117,
		"PRK":     118,
		"KOR":     119,
		"KWT":     120,
		"KGZ":     121,
		"LAO":     122,
		"LVA":     123,
		"LBN":     124,
		"LSO":     125,
		"LBR":     126,
		"LBY":     127,
		"LIE":     128,
		"LTU":     129,
		"LUX":     130,
		"MAC":     131,
		"MDG":     132,
		"MWI":     133,
		"MYS":     134,
		"MDV":     135,
		"MLI":     136,
		"MLT":     137,
		"MHL":     138,
		"MTQ":     139,
		"MRT":     140,
		"MUS":     141,
		"MYT":     142,
		"MEX":     143,
		"FSM":     144,
		"MDA":     145,
		"MCO":     146,
		"MNG":     147,
		"MNE":     148,
		"MSR":     149,
		"MAR":     150,
		"MOZ":     151,
		"MMR":     152,
		"NAM":     153,
		"NRU":     154,
		"NPL":     155,
		"NLD":     156,
		"NCL":     157,
		"NZL":     158,
		"NIC":     159,
		"NER":     160,
		"NGA":     161,
		"NIU":     162,
		"NFK":     163,
		"MNP":     164,
		"NOR":     165,
		"OMN":     166,
		"PAK":     167,
		"PLW":     168,
		"PAN":     170,
		"PNG":     171,
		"PRY":     172,
		"PER":     173,
		"PHL":     174,
		"PCN":     175,
		"POL":     176,
		"PRT":     177,
		"PRI":     178,
		"QAT":     179,
		"MKD":     180,
		"ROU":     181,
		"RUS":     182,
		"RWA":     183,
		"REU":     184,
		"BLM":     185,
		"KNA":     187,
		"LCA":     188,
		"MAF":     189,
		"SPM":     190,
		"VCT":     191,
		"WSM":     192,
		"SMR":     193,
		"STP":     194,
		"SAU":     195,
		"SEN":     196,
		"SRB":     197,
		"SYC":     198,
		"SLE":     199,
		"SGP":     200,
		"SXM":     201,
		"SVK":     202,
		"SVN":     203,
		"SLB":     204,
		"SOM":     205,
		"ZAF":     206,
		"SGS":     207,
		"SSD":     208,
		"ESP":     209,
		"LKA":     210,
		"SDN":     211,
		"SUR":     212,
		"SJM":     213,
		"SWE":     214,
		"CHE":     215,
		"SYR":     216,
		"TWN":     217,
		"TJK":     218,
		"THA":     220,
		"TLS":     221,
		"TGO":     222,
		"TKL":     223,
		"TON":     224,
		"TTO":     225,
		"TUN":     226,
		"TUR":     227,
		"TKM":     228,
		"TCA":     229,
		"TUV":     230,
		"UGA":     231,
		"UKR":     232,
		"ARE":     233,
		"GBR":     234,
		"UMI":     235,
		"USA":     236,
		"URY":     237,
		"UZB":     238,
		"VUT":     239,
		"VEN":     240,
		"VNM":     241,
		"VGB":     242,
		"VIR":     243,
		"WLF":     244,
		"ESH":     245,
		"YEM":     246,
		"ZMB":     247,
		"ZWE":     248,
		"ALA":     249,
	}
)

func (x Country) Enum() *Country {
	p := new(Country)
	*p = x
	return p
}

func (x Country) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Country) Descriptor() protoreflect.EnumDescriptor {
	return file_api_enums_country_proto_enumTypes[0].Descriptor()
}

func (Country) Type() protoreflect.EnumType {
	return &file_api_enums_country_proto_enumTypes[0]
}

func (x Country) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Country.Descriptor instead.
func (Country) EnumDescriptor() ([]byte, []int) {
	return file_api_enums_country_proto_rawDescGZIP(), []int{0}
}

var File_api_enums_country_proto protoreflect.FileDescriptor

var file_api_enums_country_proto_rawDesc = []byte{
	0x0a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2a, 0xaa, 0x12, 0x0a, 0x07, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x46, 0x47, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c,
	0x42, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x5a, 0x41, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x53, 0x4d, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x47, 0x4f, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x49, 0x41, 0x10, 0x07,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x54, 0x41, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x54, 0x47,
	0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x52, 0x47, 0x10, 0x0a, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x52, 0x4d, 0x10, 0x0b, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x42, 0x57, 0x10, 0x0c, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x55, 0x53, 0x10, 0x0d, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x55, 0x54, 0x10, 0x0e, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x5a, 0x45, 0x10, 0x0f, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x48, 0x53, 0x10,
	0x10, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x48, 0x52, 0x10, 0x11, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x47,
	0x44, 0x10, 0x12, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x52, 0x42, 0x10, 0x13, 0x12, 0x07, 0x0a, 0x03,
	0x42, 0x4c, 0x52, 0x10, 0x14, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x45, 0x4c, 0x10, 0x15, 0x12, 0x07,
	0x0a, 0x03, 0x42, 0x4c, 0x5a, 0x10, 0x16, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x45, 0x4e, 0x10, 0x17,
	0x12, 0x07, 0x0a, 0x03, 0x42, 0x4d, 0x55, 0x10, 0x18, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x54, 0x4e,
	0x10, 0x19, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x4f, 0x4c, 0x10, 0x1a, 0x12, 0x07, 0x0a, 0x03, 0x42,
	0x49, 0x48, 0x10, 0x1c, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x57, 0x41, 0x10, 0x1d, 0x12, 0x07, 0x0a,
	0x03, 0x42, 0x56, 0x54, 0x10, 0x1e, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x52, 0x41, 0x10, 0x1f, 0x12,
	0x07, 0x0a, 0x03, 0x49, 0x4f, 0x54, 0x10, 0x20, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x52, 0x4e, 0x10,
	0x21, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x47, 0x52, 0x10, 0x22, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x46,
	0x41, 0x10, 0x23, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x44, 0x49, 0x10, 0x24, 0x12, 0x07, 0x0a, 0x03,
	0x43, 0x50, 0x56, 0x10, 0x25, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x48, 0x4d, 0x10, 0x26, 0x12, 0x07,
	0x0a, 0x03, 0x43, 0x4d, 0x52, 0x10, 0x27, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x41, 0x4e, 0x10, 0x28,
	0x12, 0x07, 0x0a, 0x03, 0x43, 0x59, 0x4d, 0x10, 0x29, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x41, 0x46,
	0x10, 0x2a, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x44, 0x10, 0x2b, 0x12, 0x07, 0x0a, 0x03, 0x43,
	0x48, 0x4c, 0x10, 0x2c, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x48, 0x4e, 0x10, 0x2d, 0x12, 0x07, 0x0a,
	0x03, 0x43, 0x58, 0x52, 0x10, 0x2e, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x43, 0x4b, 0x10, 0x2f, 0x12,
	0x07, 0x0a, 0x03, 0x43, 0x4f, 0x4c, 0x10, 0x30, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4f, 0x4d, 0x10,
	0x31, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4f, 0x44, 0x10, 0x32, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4f,
	0x47, 0x10, 0x33, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4f, 0x4b, 0x10, 0x34, 0x12, 0x07, 0x0a, 0x03,
	0x43, 0x52, 0x49, 0x10, 0x35, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x52, 0x56, 0x10, 0x36, 0x12, 0x07,
	0x0a, 0x03, 0x43, 0x55, 0x42, 0x10, 0x37, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x55, 0x57, 0x10, 0x38,
	0x12, 0x07, 0x0a, 0x03, 0x43, 0x59, 0x50, 0x10, 0x39, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x5a, 0x45,
	0x10, 0x3a, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x49, 0x56, 0x10, 0x3b, 0x12, 0x07, 0x0a, 0x03, 0x44,
	0x4e, 0x4b, 0x10, 0x3c, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x4a, 0x49, 0x10, 0x3d, 0x12, 0x07, 0x0a,
	0x03, 0x44, 0x4d, 0x41, 0x10, 0x3e, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x4f, 0x4d, 0x10, 0x3f, 0x12,
	0x07, 0x0a, 0x03, 0x45, 0x43, 0x55, 0x10, 0x40, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x47, 0x59, 0x10,
	0x41, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x4c, 0x56, 0x10, 0x42, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x4e,
	0x51, 0x10, 0x43, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x52, 0x49, 0x10, 0x44, 0x12, 0x07, 0x0a, 0x03,
	0x45, 0x53, 0x54, 0x10, 0x45, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x57, 0x5a, 0x10, 0x46, 0x12, 0x07,
	0x0a, 0x03, 0x45, 0x54, 0x48, 0x10, 0x47, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x4c, 0x4b, 0x10, 0x48,
	0x12, 0x07, 0x0a, 0x03, 0x46, 0x52, 0x4f, 0x10, 0x49, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x4a, 0x49,
	0x10, 0x4a, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x49, 0x4e, 0x10, 0x4b, 0x12, 0x07, 0x0a, 0x03, 0x46,
	0x52, 0x41, 0x10, 0x4c, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x55, 0x46, 0x10, 0x4d, 0x12, 0x07, 0x0a,
	0x03, 0x50, 0x59, 0x46, 0x10, 0x4e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x54, 0x46, 0x10, 0x4f, 0x12,
	0x07, 0x0a, 0x03, 0x47, 0x41, 0x42, 0x10, 0x50, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x4d, 0x42, 0x10,
	0x51, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x45, 0x4f, 0x10, 0x52, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x45,
	0x55, 0x10, 0x53, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x48, 0x41, 0x10, 0x54, 0x12, 0x07, 0x0a, 0x03,
	0x47, 0x49, 0x42, 0x10, 0x55, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x52, 0x43, 0x10, 0x56, 0x12, 0x07,
	0x0a, 0x03, 0x47, 0x52, 0x4c, 0x10, 0x57, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x52, 0x44, 0x10, 0x58,
	0x12, 0x07, 0x0a, 0x03, 0x47, 0x4c, 0x50, 0x10, 0x59, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x55, 0x4d,
	0x10, 0x5a, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x54, 0x4d, 0x10, 0x5b, 0x12, 0x07, 0x0a, 0x03, 0x47,
	0x47, 0x59, 0x10, 0x5c, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x49, 0x4e, 0x10, 0x5d, 0x12, 0x07, 0x0a,
	0x03, 0x47, 0x4e, 0x42, 0x10, 0x5e, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x55, 0x59, 0x10, 0x5f, 0x12,
	0x07, 0x0a, 0x03, 0x48, 0x54, 0x49, 0x10, 0x60, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x4d, 0x44, 0x10,
	0x61, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x41, 0x54, 0x10, 0x62, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x4e,
	0x44, 0x10, 0x63, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x4b, 0x47, 0x10, 0x64, 0x12, 0x07, 0x0a, 0x03,
	0x48, 0x55, 0x4e, 0x10, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x53, 0x4c, 0x10, 0x66, 0x12, 0x07,
	0x0a, 0x03, 0x49, 0x4e, 0x44, 0x10, 0x67, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x44, 0x4e, 0x10, 0x68,
	0x12, 0x07, 0x0a, 0x03, 0x49, 0x52, 0x4e, 0x10, 0x69, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x52, 0x51,
	0x10, 0x6a, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x52, 0x4c, 0x10, 0x6b, 0x12, 0x07, 0x0a, 0x03, 0x49,
	0x4d, 0x4e, 0x10, 0x6c, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x53, 0x52, 0x10, 0x6d, 0x12, 0x07, 0x0a,
	0x03, 0x49, 0x54, 0x41, 0x10, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x41, 0x4d, 0x10, 0x6f, 0x12,
	0x07, 0x0a, 0x03, 0x4a, 0x50, 0x4e, 0x10, 0x70, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x45, 0x59, 0x10,
	0x71, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x4f, 0x52, 0x10, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x41,
	0x5a, 0x10, 0x73, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x45, 0x4e, 0x10, 0x74, 0x12, 0x07, 0x0a, 0x03,
	0x4b, 0x49, 0x52, 0x10, 0x75, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x52, 0x4b, 0x10, 0x76, 0x12, 0x07,
	0x0a, 0x03, 0x4b, 0x4f, 0x52, 0x10, 0x77, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x57, 0x54, 0x10, 0x78,
	0x12, 0x07, 0x0a, 0x03, 0x4b, 0x47, 0x5a, 0x10, 0x79, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x41, 0x4f,
	0x10, 0x7a, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x56, 0x41, 0x10, 0x7b, 0x12, 0x07, 0x0a, 0x03, 0x4c,
	0x42, 0x4e, 0x10, 0x7c, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x53, 0x4f, 0x10, 0x7d, 0x12, 0x07, 0x0a,
	0x03, 0x4c, 0x42, 0x52, 0x10, 0x7e, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x42, 0x59, 0x10, 0x7f, 0x12,
	0x08, 0x0a, 0x03, 0x4c, 0x49, 0x45, 0x10, 0x80, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4c, 0x54, 0x55,
	0x10, 0x81, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4c, 0x55, 0x58, 0x10, 0x82, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x4d, 0x41, 0x43, 0x10, 0x83, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x44, 0x47, 0x10, 0x84,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x57, 0x49, 0x10, 0x85, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d,
	0x59, 0x53, 0x10, 0x86, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x44, 0x56, 0x10, 0x87, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x4d, 0x4c, 0x49, 0x10, 0x88, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x4c, 0x54,
	0x10, 0x89, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x48, 0x4c, 0x10, 0x8a, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x4d, 0x54, 0x51, 0x10, 0x8b, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x52, 0x54, 0x10, 0x8c,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x55, 0x53, 0x10, 0x8d, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d,
	0x59, 0x54, 0x10, 0x8e, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x45, 0x58, 0x10, 0x8f, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x46, 0x53, 0x4d, 0x10, 0x90, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x44, 0x41,
	0x10, 0x91, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x43, 0x4f, 0x10, 0x92, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x4d, 0x4e, 0x47, 0x10, 0x93, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x4e, 0x45, 0x10, 0x94,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x53, 0x52, 0x10, 0x95, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d,
	0x41, 0x52, 0x10, 0x96, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x4f, 0x5a, 0x10, 0x97, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x4d, 0x4d, 0x52, 0x10, 0x98, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4e, 0x41, 0x4d,
	0x10, 0x99, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4e, 0x52, 0x55, 0x10, 0x9a, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x4e, 0x50, 0x4c, 0x10, 0x9b, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4e, 0x4c, 0x44, 0x10, 0x9c,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x4e, 0x43, 0x4c, 0x10, 0x9d, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4e,
	0x5a, 0x4c, 0x10, 0x9e, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4e, 0x49, 0x43, 0x10, 0x9f, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x4e, 0x45, 0x52, 0x10, 0xa0, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4e, 0x47, 0x41,
	0x10, 0xa1, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4e, 0x49, 0x55, 0x10, 0xa2, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x4e, 0x46, 0x4b, 0x10, 0xa3, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4d, 0x4e, 0x50, 0x10, 0xa4,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x4e, 0x4f, 0x52, 0x10, 0xa5, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4f,
	0x4d, 0x4e, 0x10, 0xa6, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x50, 0x41, 0x4b, 0x10, 0xa7, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x50, 0x4c, 0x57, 0x10, 0xa8, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x50, 0x41, 0x4e,
	0x10, 0xaa, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x50, 0x4e, 0x47, 0x10, 0xab, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x50, 0x52, 0x59, 0x10, 0xac, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x50, 0x45, 0x52, 0x10, 0xad,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x50, 0x48, 0x4c, 0x10, 0xae, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x50,
	0x43, 0x4e, 0x10, 0xaf, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x50, 0x4f, 0x4c, 0x10, 0xb0, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x50, 0x52, 0x54, 0x10, 0xb1, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x50, 0x52, 0x49,
	0x10, 0xb2, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x51, 0x41, 0x54, 0x10, 0xb3, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x4d, 0x4b, 0x44, 0x10, 0xb4, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x52, 0x4f, 0x55, 0x10, 0xb5,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x52, 0x55, 0x53, 0x10, 0xb6, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x52,
	0x57, 0x41, 0x10, 0xb7, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x52, 0x45, 0x55, 0x10, 0xb8, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x42, 0x4c, 0x4d, 0x10, 0xb9, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4b, 0x4e, 0x41,
	0x10, 0xbb, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4c, 0x43, 0x41, 0x10, 0xbc, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x4d, 0x41, 0x46, 0x10, 0xbd, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x50, 0x4d, 0x10, 0xbe,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x56, 0x43, 0x54, 0x10, 0xbf, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x57,
	0x53, 0x4d, 0x10, 0xc0, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x4d, 0x52, 0x10, 0xc1, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x53, 0x54, 0x50, 0x10, 0xc2, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x41, 0x55,
	0x10, 0xc3, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x45, 0x4e, 0x10, 0xc4, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x53, 0x52, 0x42, 0x10, 0xc5, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x59, 0x43, 0x10, 0xc6,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x4c, 0x45, 0x10, 0xc7, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53,
	0x47, 0x50, 0x10, 0xc8, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x58, 0x4d, 0x10, 0xc9, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x53, 0x56, 0x4b, 0x10, 0xca, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x56, 0x4e,
	0x10, 0xcb, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x4c, 0x42, 0x10, 0xcc, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x53, 0x4f, 0x4d, 0x10, 0xcd, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x5a, 0x41, 0x46, 0x10, 0xce,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x47, 0x53, 0x10, 0xcf, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53,
	0x53, 0x44, 0x10, 0xd0, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x45, 0x53, 0x50, 0x10, 0xd1, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x4c, 0x4b, 0x41, 0x10, 0xd2, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x44, 0x4e,
	0x10, 0xd3, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x55, 0x52, 0x10, 0xd4, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x53, 0x4a, 0x4d, 0x10, 0xd5, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x57, 0x45, 0x10, 0xd6,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x43, 0x48, 0x45, 0x10, 0xd7, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53,
	0x59, 0x52, 0x10, 0xd8, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x57, 0x4e, 0x10, 0xd9, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x54, 0x4a, 0x4b, 0x10, 0xda, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x48, 0x41,
	0x10, 0xdc, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x4c, 0x53, 0x10, 0xdd, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x54, 0x47, 0x4f, 0x10, 0xde, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x4b, 0x4c, 0x10, 0xdf,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x4f, 0x4e, 0x10, 0xe0, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54,
	0x54, 0x4f, 0x10, 0xe1, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x55, 0x4e, 0x10, 0xe2, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x54, 0x55, 0x52, 0x10, 0xe3, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x4b, 0x4d,
	0x10, 0xe4, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x43, 0x41, 0x10, 0xe5, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x54, 0x55, 0x56, 0x10, 0xe6, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x55, 0x47, 0x41, 0x10, 0xe7,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x55, 0x4b, 0x52, 0x10, 0xe8, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x41,
	0x52, 0x45, 0x10, 0xe9, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x47, 0x42, 0x52, 0x10, 0xea, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x55, 0x4d, 0x49, 0x10, 0xeb, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x55, 0x53, 0x41,
	0x10, 0xec, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x55, 0x52, 0x59, 0x10, 0xed, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x55, 0x5a, 0x42, 0x10, 0xee, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x56, 0x55, 0x54, 0x10, 0xef,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x56, 0x45, 0x4e, 0x10, 0xf0, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x56,
	0x4e, 0x4d, 0x10, 0xf1, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x56, 0x47, 0x42, 0x10, 0xf2, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x56, 0x49, 0x52, 0x10, 0xf3, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x57, 0x4c, 0x46,
	0x10, 0xf4, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x45, 0x53, 0x48, 0x10, 0xf5, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x59, 0x45, 0x4d, 0x10, 0xf6, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x5a, 0x4d, 0x42, 0x10, 0xf7,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x5a, 0x57, 0x45, 0x10, 0xf8, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x41,
	0x4c, 0x41, 0x10, 0xf9, 0x01, 0x42, 0x53, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x50, 0x01, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_api_enums_country_proto_rawDescOnce sync.Once
	file_api_enums_country_proto_rawDescData = file_api_enums_country_proto_rawDesc
)

func file_api_enums_country_proto_rawDescGZIP() []byte {
	file_api_enums_country_proto_rawDescOnce.Do(func() {
		file_api_enums_country_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_enums_country_proto_rawDescData)
	})
	return file_api_enums_country_proto_rawDescData
}

var file_api_enums_country_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_enums_country_proto_goTypes = []interface{}{
	(Country)(0), // 0: google.retail.enums.countries.Country
}
var file_api_enums_country_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_api_enums_country_proto_init() }
func file_api_enums_country_proto_init() {
	if File_api_enums_country_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_enums_country_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_enums_country_proto_goTypes,
		DependencyIndexes: file_api_enums_country_proto_depIdxs,
		EnumInfos:         file_api_enums_country_proto_enumTypes,
	}.Build()
	File_api_enums_country_proto = out.File
	file_api_enums_country_proto_rawDesc = nil
	file_api_enums_country_proto_goTypes = nil
	file_api_enums_country_proto_depIdxs = nil
}
