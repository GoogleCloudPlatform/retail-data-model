// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.10
// source: api/common/service.proto

package grpc

import (
	context "context"
	pb "github.com/GoogleCloudPlatform/retail-data-model/common/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_api_common_service_proto protoreflect.FileDescriptor

var file_api_common_service_proto_rawDesc = []byte{
	0x0a, 0x18, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x1a, 0x16, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x98, 0x04, 0x0a, 0x09, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x30, 0x01,
	0x12, 0x6b, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x64, 0x12, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x30, 0x01, 0x12, 0x69, 0x0a,
	0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x1b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x15, 0x3a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x0a, 0x2f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x1a, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0x0a, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x70, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x1a,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15,
	0x3a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2a, 0x0a, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x32, 0xce, 0x05, 0x0a, 0x13, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x53, 0x75, 0x62, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6c, 0x0a,
	0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53,
	0x75, 0x62, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x17, 0x12, 0x15, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x62,
	0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x30, 0x01, 0x12, 0x81, 0x01, 0x0a, 0x08,
	0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x64, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x62, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x75,
	0x62, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x12, 0x1a, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x64,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x30, 0x01, 0x12,
	0x96, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x75, 0x62, 0x64,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x75, 0x62, 0x64, 0x69, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x13, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x15, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x64,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x75, 0x62, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x1a, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x53, 0x75, 0x62, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x32, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73,
	0x75, 0x62, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x15, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x92, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x75,
	0x62, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x13, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2a,
	0x15, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x64, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0xa8, 0x04, 0x0a, 0x09, 0x49, 0x43, 0x41, 0x4f, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x49,
	0x43, 0x41, 0x4f, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12,
	0x0b, 0x2f, 0x69, 0x63, 0x61, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x30, 0x01, 0x12, 0x6b,
	0x0a, 0x08, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x64, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x43, 0x41, 0x4f, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x69, 0x63, 0x61, 0x6f,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x6e, 0x0a, 0x06, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e,
	0x49, 0x43, 0x41, 0x4f, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x62, 0x2e, 0x49, 0x43, 0x41, 0x4f, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x18, 0x3a, 0x09, 0x69, 0x63, 0x61, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x0b,
	0x2f, 0x69, 0x63, 0x61, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x6e, 0x0a, 0x06, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e,
	0x49, 0x43, 0x41, 0x4f, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x62, 0x2e, 0x49, 0x43, 0x41, 0x4f, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x18, 0x3a, 0x09, 0x69, 0x63, 0x61, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x0b,
	0x2f, 0x69, 0x63, 0x61, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x74, 0x0a, 0x06, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e,
	0x49, 0x43, 0x41, 0x4f, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x09, 0x69, 0x63, 0x61, 0x6f, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x2a, 0x0b, 0x2f, 0x69, 0x63, 0x61, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x32, 0x97, 0x02, 0x0a, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x79, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x1a, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1a, 0x3a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x22, 0x0e, 0x2f,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x8b, 0x01,
	0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x10, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x73, 0x30, 0x01, 0x32, 0xb3, 0x04, 0x0a, 0x0a,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x06, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x1a, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x3a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x0b, 0x2f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x7a, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x1a, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x15,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x64, 0x69, 0x73, 0x65, 0x5f, 0x68, 0x69, 0x65, 0x72,
	0x61, 0x72, 0x63, 0x68, 0x79, 0x1a, 0x0b, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x6e, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12,
	0x12, 0x10, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x5c, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0d, 0x12, 0x0b, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x30, 0x01,
	0x12, 0x6f, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x2a,
	0x10, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x42, 0x5d, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_api_common_service_proto_goTypes = []interface{}{
	(*emptypb.Empty)(nil),               // 0: google.protobuf.Empty
	(*pb.IDRequest)(nil),                // 1: google.retail.common.pb.IDRequest
	(*pb.Country)(nil),                  // 2: google.retail.common.pb.Country
	(*pb.CountrySubdivision)(nil),       // 3: google.retail.common.pb.CountrySubdivision
	(*pb.ICAOCode)(nil),                 // 4: google.retail.common.pb.ICAOCode
	(*pb.AuditRecord)(nil),              // 5: google.retail.common.pb.AuditRecord
	(*pb.AuditRecordSearchRequest)(nil), // 6: google.retail.common.pb.AuditRecordSearchRequest
	(*pb.Category)(nil),                 // 7: google.retail.common.pb.Category
	(*fieldmaskpb.FieldMask)(nil),       // 8: google.protobuf.FieldMask
	(*pb.StatusResponse)(nil),           // 9: google.retail.common.pb.StatusResponse
}
var file_api_common_service_proto_depIdxs = []int32{
	0,  // 0: google.retail.common.grpc.Countries.List:input_type -> google.protobuf.Empty
	1,  // 1: google.retail.common.grpc.Countries.FindById:input_type -> google.retail.common.pb.IDRequest
	2,  // 2: google.retail.common.grpc.Countries.Create:input_type -> google.retail.common.pb.Country
	2,  // 3: google.retail.common.grpc.Countries.Update:input_type -> google.retail.common.pb.Country
	2,  // 4: google.retail.common.grpc.Countries.Delete:input_type -> google.retail.common.pb.Country
	0,  // 5: google.retail.common.grpc.CountrySubdivisions.List:input_type -> google.protobuf.Empty
	1,  // 6: google.retail.common.grpc.CountrySubdivisions.FindById:input_type -> google.retail.common.pb.IDRequest
	3,  // 7: google.retail.common.grpc.CountrySubdivisions.Create:input_type -> google.retail.common.pb.CountrySubdivision
	3,  // 8: google.retail.common.grpc.CountrySubdivisions.Update:input_type -> google.retail.common.pb.CountrySubdivision
	3,  // 9: google.retail.common.grpc.CountrySubdivisions.Delete:input_type -> google.retail.common.pb.CountrySubdivision
	0,  // 10: google.retail.common.grpc.ICAOCodes.List:input_type -> google.protobuf.Empty
	1,  // 11: google.retail.common.grpc.ICAOCodes.FindById:input_type -> google.retail.common.pb.IDRequest
	4,  // 12: google.retail.common.grpc.ICAOCodes.Create:input_type -> google.retail.common.pb.ICAOCode
	4,  // 13: google.retail.common.grpc.ICAOCodes.Update:input_type -> google.retail.common.pb.ICAOCode
	4,  // 14: google.retail.common.grpc.ICAOCodes.Delete:input_type -> google.retail.common.pb.ICAOCode
	5,  // 15: google.retail.common.grpc.AuditRecords.Create:input_type -> google.retail.common.pb.AuditRecord
	6,  // 16: google.retail.common.grpc.AuditRecords.Search:input_type -> google.retail.common.pb.AuditRecordSearchRequest
	7,  // 17: google.retail.common.grpc.Categories.Create:input_type -> google.retail.common.pb.Category
	7,  // 18: google.retail.common.grpc.Categories.Update:input_type -> google.retail.common.pb.Category
	1,  // 19: google.retail.common.grpc.Categories.GetCategory:input_type -> google.retail.common.pb.IDRequest
	8,  // 20: google.retail.common.grpc.Categories.List:input_type -> google.protobuf.FieldMask
	1,  // 21: google.retail.common.grpc.Categories.Delete:input_type -> google.retail.common.pb.IDRequest
	2,  // 22: google.retail.common.grpc.Countries.List:output_type -> google.retail.common.pb.Country
	2,  // 23: google.retail.common.grpc.Countries.FindById:output_type -> google.retail.common.pb.Country
	2,  // 24: google.retail.common.grpc.Countries.Create:output_type -> google.retail.common.pb.Country
	2,  // 25: google.retail.common.grpc.Countries.Update:output_type -> google.retail.common.pb.Country
	9,  // 26: google.retail.common.grpc.Countries.Delete:output_type -> google.retail.common.pb.StatusResponse
	3,  // 27: google.retail.common.grpc.CountrySubdivisions.List:output_type -> google.retail.common.pb.CountrySubdivision
	3,  // 28: google.retail.common.grpc.CountrySubdivisions.FindById:output_type -> google.retail.common.pb.CountrySubdivision
	3,  // 29: google.retail.common.grpc.CountrySubdivisions.Create:output_type -> google.retail.common.pb.CountrySubdivision
	3,  // 30: google.retail.common.grpc.CountrySubdivisions.Update:output_type -> google.retail.common.pb.CountrySubdivision
	9,  // 31: google.retail.common.grpc.CountrySubdivisions.Delete:output_type -> google.retail.common.pb.StatusResponse
	4,  // 32: google.retail.common.grpc.ICAOCodes.List:output_type -> google.retail.common.pb.ICAOCode
	4,  // 33: google.retail.common.grpc.ICAOCodes.FindById:output_type -> google.retail.common.pb.ICAOCode
	4,  // 34: google.retail.common.grpc.ICAOCodes.Create:output_type -> google.retail.common.pb.ICAOCode
	4,  // 35: google.retail.common.grpc.ICAOCodes.Update:output_type -> google.retail.common.pb.ICAOCode
	9,  // 36: google.retail.common.grpc.ICAOCodes.Delete:output_type -> google.retail.common.pb.StatusResponse
	9,  // 37: google.retail.common.grpc.AuditRecords.Create:output_type -> google.retail.common.pb.StatusResponse
	5,  // 38: google.retail.common.grpc.AuditRecords.Search:output_type -> google.retail.common.pb.AuditRecord
	7,  // 39: google.retail.common.grpc.Categories.Create:output_type -> google.retail.common.pb.Category
	7,  // 40: google.retail.common.grpc.Categories.Update:output_type -> google.retail.common.pb.Category
	7,  // 41: google.retail.common.grpc.Categories.GetCategory:output_type -> google.retail.common.pb.Category
	7,  // 42: google.retail.common.grpc.Categories.List:output_type -> google.retail.common.pb.Category
	9,  // 43: google.retail.common.grpc.Categories.Delete:output_type -> google.retail.common.pb.StatusResponse
	22, // [22:44] is the sub-list for method output_type
	0,  // [0:22] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_api_common_service_proto_init() }
func file_api_common_service_proto_init() {
	if File_api_common_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_common_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_api_common_service_proto_goTypes,
		DependencyIndexes: file_api_common_service_proto_depIdxs,
	}.Build()
	File_api_common_service_proto = out.File
	file_api_common_service_proto_rawDesc = nil
	file_api_common_service_proto_goTypes = nil
	file_api_common_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CountriesClient is the client API for Countries service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CountriesClient interface {
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Countries_ListClient, error)
	FindById(ctx context.Context, in *pb.IDRequest, opts ...grpc.CallOption) (Countries_FindByIdClient, error)
	Create(ctx context.Context, in *pb.Country, opts ...grpc.CallOption) (*pb.Country, error)
	Update(ctx context.Context, in *pb.Country, opts ...grpc.CallOption) (*pb.Country, error)
	Delete(ctx context.Context, in *pb.Country, opts ...grpc.CallOption) (*pb.StatusResponse, error)
}

type countriesClient struct {
	cc grpc.ClientConnInterface
}

func NewCountriesClient(cc grpc.ClientConnInterface) CountriesClient {
	return &countriesClient{cc}
}

func (c *countriesClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Countries_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Countries_serviceDesc.Streams[0], "/google.retail.common.grpc.Countries/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &countriesListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Countries_ListClient interface {
	Recv() (*pb.Country, error)
	grpc.ClientStream
}

type countriesListClient struct {
	grpc.ClientStream
}

func (x *countriesListClient) Recv() (*pb.Country, error) {
	m := new(pb.Country)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *countriesClient) FindById(ctx context.Context, in *pb.IDRequest, opts ...grpc.CallOption) (Countries_FindByIdClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Countries_serviceDesc.Streams[1], "/google.retail.common.grpc.Countries/FindById", opts...)
	if err != nil {
		return nil, err
	}
	x := &countriesFindByIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Countries_FindByIdClient interface {
	Recv() (*pb.Country, error)
	grpc.ClientStream
}

type countriesFindByIdClient struct {
	grpc.ClientStream
}

func (x *countriesFindByIdClient) Recv() (*pb.Country, error) {
	m := new(pb.Country)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *countriesClient) Create(ctx context.Context, in *pb.Country, opts ...grpc.CallOption) (*pb.Country, error) {
	out := new(pb.Country)
	err := c.cc.Invoke(ctx, "/google.retail.common.grpc.Countries/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countriesClient) Update(ctx context.Context, in *pb.Country, opts ...grpc.CallOption) (*pb.Country, error) {
	out := new(pb.Country)
	err := c.cc.Invoke(ctx, "/google.retail.common.grpc.Countries/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countriesClient) Delete(ctx context.Context, in *pb.Country, opts ...grpc.CallOption) (*pb.StatusResponse, error) {
	out := new(pb.StatusResponse)
	err := c.cc.Invoke(ctx, "/google.retail.common.grpc.Countries/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CountriesServer is the server API for Countries service.
type CountriesServer interface {
	List(*emptypb.Empty, Countries_ListServer) error
	FindById(*pb.IDRequest, Countries_FindByIdServer) error
	Create(context.Context, *pb.Country) (*pb.Country, error)
	Update(context.Context, *pb.Country) (*pb.Country, error)
	Delete(context.Context, *pb.Country) (*pb.StatusResponse, error)
}

// UnimplementedCountriesServer can be embedded to have forward compatible implementations.
type UnimplementedCountriesServer struct {
}

func (*UnimplementedCountriesServer) List(*emptypb.Empty, Countries_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedCountriesServer) FindById(*pb.IDRequest, Countries_FindByIdServer) error {
	return status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (*UnimplementedCountriesServer) Create(context.Context, *pb.Country) (*pb.Country, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedCountriesServer) Update(context.Context, *pb.Country) (*pb.Country, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedCountriesServer) Delete(context.Context, *pb.Country) (*pb.StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterCountriesServer(s *grpc.Server, srv CountriesServer) {
	s.RegisterService(&_Countries_serviceDesc, srv)
}

func _Countries_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CountriesServer).List(m, &countriesListServer{stream})
}

type Countries_ListServer interface {
	Send(*pb.Country) error
	grpc.ServerStream
}

type countriesListServer struct {
	grpc.ServerStream
}

func (x *countriesListServer) Send(m *pb.Country) error {
	return x.ServerStream.SendMsg(m)
}

func _Countries_FindById_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(pb.IDRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CountriesServer).FindById(m, &countriesFindByIdServer{stream})
}

type Countries_FindByIdServer interface {
	Send(*pb.Country) error
	grpc.ServerStream
}

type countriesFindByIdServer struct {
	grpc.ServerStream
}

func (x *countriesFindByIdServer) Send(m *pb.Country) error {
	return x.ServerStream.SendMsg(m)
}

func _Countries_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Country)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountriesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.common.grpc.Countries/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountriesServer).Create(ctx, req.(*pb.Country))
	}
	return interceptor(ctx, in, info, handler)
}

func _Countries_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Country)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountriesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.common.grpc.Countries/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountriesServer).Update(ctx, req.(*pb.Country))
	}
	return interceptor(ctx, in, info, handler)
}

func _Countries_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Country)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountriesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.common.grpc.Countries/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountriesServer).Delete(ctx, req.(*pb.Country))
	}
	return interceptor(ctx, in, info, handler)
}

var _Countries_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.retail.common.grpc.Countries",
	HandlerType: (*CountriesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Countries_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Countries_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Countries_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Countries_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindById",
			Handler:       _Countries_FindById_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/common/service.proto",
}

// CountrySubdivisionsClient is the client API for CountrySubdivisions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CountrySubdivisionsClient interface {
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (CountrySubdivisions_ListClient, error)
	FindById(ctx context.Context, in *pb.IDRequest, opts ...grpc.CallOption) (CountrySubdivisions_FindByIdClient, error)
	Create(ctx context.Context, in *pb.CountrySubdivision, opts ...grpc.CallOption) (*pb.CountrySubdivision, error)
	Update(ctx context.Context, in *pb.CountrySubdivision, opts ...grpc.CallOption) (*pb.CountrySubdivision, error)
	Delete(ctx context.Context, in *pb.CountrySubdivision, opts ...grpc.CallOption) (*pb.StatusResponse, error)
}

type countrySubdivisionsClient struct {
	cc grpc.ClientConnInterface
}

func NewCountrySubdivisionsClient(cc grpc.ClientConnInterface) CountrySubdivisionsClient {
	return &countrySubdivisionsClient{cc}
}

func (c *countrySubdivisionsClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (CountrySubdivisions_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CountrySubdivisions_serviceDesc.Streams[0], "/google.retail.common.grpc.CountrySubdivisions/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &countrySubdivisionsListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CountrySubdivisions_ListClient interface {
	Recv() (*pb.CountrySubdivision, error)
	grpc.ClientStream
}

type countrySubdivisionsListClient struct {
	grpc.ClientStream
}

func (x *countrySubdivisionsListClient) Recv() (*pb.CountrySubdivision, error) {
	m := new(pb.CountrySubdivision)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *countrySubdivisionsClient) FindById(ctx context.Context, in *pb.IDRequest, opts ...grpc.CallOption) (CountrySubdivisions_FindByIdClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CountrySubdivisions_serviceDesc.Streams[1], "/google.retail.common.grpc.CountrySubdivisions/FindById", opts...)
	if err != nil {
		return nil, err
	}
	x := &countrySubdivisionsFindByIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CountrySubdivisions_FindByIdClient interface {
	Recv() (*pb.CountrySubdivision, error)
	grpc.ClientStream
}

type countrySubdivisionsFindByIdClient struct {
	grpc.ClientStream
}

func (x *countrySubdivisionsFindByIdClient) Recv() (*pb.CountrySubdivision, error) {
	m := new(pb.CountrySubdivision)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *countrySubdivisionsClient) Create(ctx context.Context, in *pb.CountrySubdivision, opts ...grpc.CallOption) (*pb.CountrySubdivision, error) {
	out := new(pb.CountrySubdivision)
	err := c.cc.Invoke(ctx, "/google.retail.common.grpc.CountrySubdivisions/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countrySubdivisionsClient) Update(ctx context.Context, in *pb.CountrySubdivision, opts ...grpc.CallOption) (*pb.CountrySubdivision, error) {
	out := new(pb.CountrySubdivision)
	err := c.cc.Invoke(ctx, "/google.retail.common.grpc.CountrySubdivisions/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countrySubdivisionsClient) Delete(ctx context.Context, in *pb.CountrySubdivision, opts ...grpc.CallOption) (*pb.StatusResponse, error) {
	out := new(pb.StatusResponse)
	err := c.cc.Invoke(ctx, "/google.retail.common.grpc.CountrySubdivisions/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CountrySubdivisionsServer is the server API for CountrySubdivisions service.
type CountrySubdivisionsServer interface {
	List(*emptypb.Empty, CountrySubdivisions_ListServer) error
	FindById(*pb.IDRequest, CountrySubdivisions_FindByIdServer) error
	Create(context.Context, *pb.CountrySubdivision) (*pb.CountrySubdivision, error)
	Update(context.Context, *pb.CountrySubdivision) (*pb.CountrySubdivision, error)
	Delete(context.Context, *pb.CountrySubdivision) (*pb.StatusResponse, error)
}

// UnimplementedCountrySubdivisionsServer can be embedded to have forward compatible implementations.
type UnimplementedCountrySubdivisionsServer struct {
}

func (*UnimplementedCountrySubdivisionsServer) List(*emptypb.Empty, CountrySubdivisions_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedCountrySubdivisionsServer) FindById(*pb.IDRequest, CountrySubdivisions_FindByIdServer) error {
	return status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (*UnimplementedCountrySubdivisionsServer) Create(context.Context, *pb.CountrySubdivision) (*pb.CountrySubdivision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedCountrySubdivisionsServer) Update(context.Context, *pb.CountrySubdivision) (*pb.CountrySubdivision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedCountrySubdivisionsServer) Delete(context.Context, *pb.CountrySubdivision) (*pb.StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterCountrySubdivisionsServer(s *grpc.Server, srv CountrySubdivisionsServer) {
	s.RegisterService(&_CountrySubdivisions_serviceDesc, srv)
}

func _CountrySubdivisions_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CountrySubdivisionsServer).List(m, &countrySubdivisionsListServer{stream})
}

type CountrySubdivisions_ListServer interface {
	Send(*pb.CountrySubdivision) error
	grpc.ServerStream
}

type countrySubdivisionsListServer struct {
	grpc.ServerStream
}

func (x *countrySubdivisionsListServer) Send(m *pb.CountrySubdivision) error {
	return x.ServerStream.SendMsg(m)
}

func _CountrySubdivisions_FindById_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(pb.IDRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CountrySubdivisionsServer).FindById(m, &countrySubdivisionsFindByIdServer{stream})
}

type CountrySubdivisions_FindByIdServer interface {
	Send(*pb.CountrySubdivision) error
	grpc.ServerStream
}

type countrySubdivisionsFindByIdServer struct {
	grpc.ServerStream
}

func (x *countrySubdivisionsFindByIdServer) Send(m *pb.CountrySubdivision) error {
	return x.ServerStream.SendMsg(m)
}

func _CountrySubdivisions_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.CountrySubdivision)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountrySubdivisionsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.common.grpc.CountrySubdivisions/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountrySubdivisionsServer).Create(ctx, req.(*pb.CountrySubdivision))
	}
	return interceptor(ctx, in, info, handler)
}

func _CountrySubdivisions_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.CountrySubdivision)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountrySubdivisionsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.common.grpc.CountrySubdivisions/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountrySubdivisionsServer).Update(ctx, req.(*pb.CountrySubdivision))
	}
	return interceptor(ctx, in, info, handler)
}

func _CountrySubdivisions_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.CountrySubdivision)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountrySubdivisionsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.common.grpc.CountrySubdivisions/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountrySubdivisionsServer).Delete(ctx, req.(*pb.CountrySubdivision))
	}
	return interceptor(ctx, in, info, handler)
}

var _CountrySubdivisions_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.retail.common.grpc.CountrySubdivisions",
	HandlerType: (*CountrySubdivisionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CountrySubdivisions_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CountrySubdivisions_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CountrySubdivisions_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _CountrySubdivisions_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindById",
			Handler:       _CountrySubdivisions_FindById_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/common/service.proto",
}

// ICAOCodesClient is the client API for ICAOCodes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ICAOCodesClient interface {
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ICAOCodes_ListClient, error)
	FindById(ctx context.Context, in *pb.IDRequest, opts ...grpc.CallOption) (*pb.ICAOCode, error)
	Create(ctx context.Context, in *pb.ICAOCode, opts ...grpc.CallOption) (*pb.ICAOCode, error)
	Update(ctx context.Context, in *pb.ICAOCode, opts ...grpc.CallOption) (*pb.ICAOCode, error)
	Delete(ctx context.Context, in *pb.ICAOCode, opts ...grpc.CallOption) (*pb.StatusResponse, error)
}

type iCAOCodesClient struct {
	cc grpc.ClientConnInterface
}

func NewICAOCodesClient(cc grpc.ClientConnInterface) ICAOCodesClient {
	return &iCAOCodesClient{cc}
}

func (c *iCAOCodesClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ICAOCodes_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ICAOCodes_serviceDesc.Streams[0], "/google.retail.common.grpc.ICAOCodes/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &iCAOCodesListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ICAOCodes_ListClient interface {
	Recv() (*pb.ICAOCode, error)
	grpc.ClientStream
}

type iCAOCodesListClient struct {
	grpc.ClientStream
}

func (x *iCAOCodesListClient) Recv() (*pb.ICAOCode, error) {
	m := new(pb.ICAOCode)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iCAOCodesClient) FindById(ctx context.Context, in *pb.IDRequest, opts ...grpc.CallOption) (*pb.ICAOCode, error) {
	out := new(pb.ICAOCode)
	err := c.cc.Invoke(ctx, "/google.retail.common.grpc.ICAOCodes/FindById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iCAOCodesClient) Create(ctx context.Context, in *pb.ICAOCode, opts ...grpc.CallOption) (*pb.ICAOCode, error) {
	out := new(pb.ICAOCode)
	err := c.cc.Invoke(ctx, "/google.retail.common.grpc.ICAOCodes/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iCAOCodesClient) Update(ctx context.Context, in *pb.ICAOCode, opts ...grpc.CallOption) (*pb.ICAOCode, error) {
	out := new(pb.ICAOCode)
	err := c.cc.Invoke(ctx, "/google.retail.common.grpc.ICAOCodes/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iCAOCodesClient) Delete(ctx context.Context, in *pb.ICAOCode, opts ...grpc.CallOption) (*pb.StatusResponse, error) {
	out := new(pb.StatusResponse)
	err := c.cc.Invoke(ctx, "/google.retail.common.grpc.ICAOCodes/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ICAOCodesServer is the server API for ICAOCodes service.
type ICAOCodesServer interface {
	List(*emptypb.Empty, ICAOCodes_ListServer) error
	FindById(context.Context, *pb.IDRequest) (*pb.ICAOCode, error)
	Create(context.Context, *pb.ICAOCode) (*pb.ICAOCode, error)
	Update(context.Context, *pb.ICAOCode) (*pb.ICAOCode, error)
	Delete(context.Context, *pb.ICAOCode) (*pb.StatusResponse, error)
}

// UnimplementedICAOCodesServer can be embedded to have forward compatible implementations.
type UnimplementedICAOCodesServer struct {
}

func (*UnimplementedICAOCodesServer) List(*emptypb.Empty, ICAOCodes_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedICAOCodesServer) FindById(context.Context, *pb.IDRequest) (*pb.ICAOCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (*UnimplementedICAOCodesServer) Create(context.Context, *pb.ICAOCode) (*pb.ICAOCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedICAOCodesServer) Update(context.Context, *pb.ICAOCode) (*pb.ICAOCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedICAOCodesServer) Delete(context.Context, *pb.ICAOCode) (*pb.StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterICAOCodesServer(s *grpc.Server, srv ICAOCodesServer) {
	s.RegisterService(&_ICAOCodes_serviceDesc, srv)
}

func _ICAOCodes_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ICAOCodesServer).List(m, &iCAOCodesListServer{stream})
}

type ICAOCodes_ListServer interface {
	Send(*pb.ICAOCode) error
	grpc.ServerStream
}

type iCAOCodesListServer struct {
	grpc.ServerStream
}

func (x *iCAOCodesListServer) Send(m *pb.ICAOCode) error {
	return x.ServerStream.SendMsg(m)
}

func _ICAOCodes_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICAOCodesServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.common.grpc.ICAOCodes/FindById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICAOCodesServer).FindById(ctx, req.(*pb.IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ICAOCodes_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.ICAOCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICAOCodesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.common.grpc.ICAOCodes/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICAOCodesServer).Create(ctx, req.(*pb.ICAOCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _ICAOCodes_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.ICAOCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICAOCodesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.common.grpc.ICAOCodes/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICAOCodesServer).Update(ctx, req.(*pb.ICAOCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _ICAOCodes_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.ICAOCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICAOCodesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.common.grpc.ICAOCodes/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICAOCodesServer).Delete(ctx, req.(*pb.ICAOCode))
	}
	return interceptor(ctx, in, info, handler)
}

var _ICAOCodes_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.retail.common.grpc.ICAOCodes",
	HandlerType: (*ICAOCodesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindById",
			Handler:    _ICAOCodes_FindById_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ICAOCodes_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ICAOCodes_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ICAOCodes_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _ICAOCodes_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/common/service.proto",
}

// AuditRecordsClient is the client API for AuditRecords service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuditRecordsClient interface {
	Create(ctx context.Context, in *pb.AuditRecord, opts ...grpc.CallOption) (*pb.StatusResponse, error)
	Search(ctx context.Context, in *pb.AuditRecordSearchRequest, opts ...grpc.CallOption) (AuditRecords_SearchClient, error)
}

type auditRecordsClient struct {
	cc grpc.ClientConnInterface
}

func NewAuditRecordsClient(cc grpc.ClientConnInterface) AuditRecordsClient {
	return &auditRecordsClient{cc}
}

func (c *auditRecordsClient) Create(ctx context.Context, in *pb.AuditRecord, opts ...grpc.CallOption) (*pb.StatusResponse, error) {
	out := new(pb.StatusResponse)
	err := c.cc.Invoke(ctx, "/google.retail.common.grpc.AuditRecords/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditRecordsClient) Search(ctx context.Context, in *pb.AuditRecordSearchRequest, opts ...grpc.CallOption) (AuditRecords_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AuditRecords_serviceDesc.Streams[0], "/google.retail.common.grpc.AuditRecords/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &auditRecordsSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AuditRecords_SearchClient interface {
	Recv() (*pb.AuditRecord, error)
	grpc.ClientStream
}

type auditRecordsSearchClient struct {
	grpc.ClientStream
}

func (x *auditRecordsSearchClient) Recv() (*pb.AuditRecord, error) {
	m := new(pb.AuditRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AuditRecordsServer is the server API for AuditRecords service.
type AuditRecordsServer interface {
	Create(context.Context, *pb.AuditRecord) (*pb.StatusResponse, error)
	Search(*pb.AuditRecordSearchRequest, AuditRecords_SearchServer) error
}

// UnimplementedAuditRecordsServer can be embedded to have forward compatible implementations.
type UnimplementedAuditRecordsServer struct {
}

func (*UnimplementedAuditRecordsServer) Create(context.Context, *pb.AuditRecord) (*pb.StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedAuditRecordsServer) Search(*pb.AuditRecordSearchRequest, AuditRecords_SearchServer) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}

func RegisterAuditRecordsServer(s *grpc.Server, srv AuditRecordsServer) {
	s.RegisterService(&_AuditRecords_serviceDesc, srv)
}

func _AuditRecords_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.AuditRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditRecordsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.common.grpc.AuditRecords/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditRecordsServer).Create(ctx, req.(*pb.AuditRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditRecords_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(pb.AuditRecordSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuditRecordsServer).Search(m, &auditRecordsSearchServer{stream})
}

type AuditRecords_SearchServer interface {
	Send(*pb.AuditRecord) error
	grpc.ServerStream
}

type auditRecordsSearchServer struct {
	grpc.ServerStream
}

func (x *auditRecordsSearchServer) Send(m *pb.AuditRecord) error {
	return x.ServerStream.SendMsg(m)
}

var _AuditRecords_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.retail.common.grpc.AuditRecords",
	HandlerType: (*AuditRecordsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AuditRecords_Create_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Search",
			Handler:       _AuditRecords_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/common/service.proto",
}

// CategoriesClient is the client API for Categories service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CategoriesClient interface {
	Create(ctx context.Context, in *pb.Category, opts ...grpc.CallOption) (*pb.Category, error)
	Update(ctx context.Context, in *pb.Category, opts ...grpc.CallOption) (*pb.Category, error)
	GetCategory(ctx context.Context, in *pb.IDRequest, opts ...grpc.CallOption) (*pb.Category, error)
	List(ctx context.Context, in *fieldmaskpb.FieldMask, opts ...grpc.CallOption) (Categories_ListClient, error)
	Delete(ctx context.Context, in *pb.IDRequest, opts ...grpc.CallOption) (*pb.StatusResponse, error)
}

type categoriesClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoriesClient(cc grpc.ClientConnInterface) CategoriesClient {
	return &categoriesClient{cc}
}

func (c *categoriesClient) Create(ctx context.Context, in *pb.Category, opts ...grpc.CallOption) (*pb.Category, error) {
	out := new(pb.Category)
	err := c.cc.Invoke(ctx, "/google.retail.common.grpc.Categories/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriesClient) Update(ctx context.Context, in *pb.Category, opts ...grpc.CallOption) (*pb.Category, error) {
	out := new(pb.Category)
	err := c.cc.Invoke(ctx, "/google.retail.common.grpc.Categories/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriesClient) GetCategory(ctx context.Context, in *pb.IDRequest, opts ...grpc.CallOption) (*pb.Category, error) {
	out := new(pb.Category)
	err := c.cc.Invoke(ctx, "/google.retail.common.grpc.Categories/GetCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriesClient) List(ctx context.Context, in *fieldmaskpb.FieldMask, opts ...grpc.CallOption) (Categories_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Categories_serviceDesc.Streams[0], "/google.retail.common.grpc.Categories/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &categoriesListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Categories_ListClient interface {
	Recv() (*pb.Category, error)
	grpc.ClientStream
}

type categoriesListClient struct {
	grpc.ClientStream
}

func (x *categoriesListClient) Recv() (*pb.Category, error) {
	m := new(pb.Category)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *categoriesClient) Delete(ctx context.Context, in *pb.IDRequest, opts ...grpc.CallOption) (*pb.StatusResponse, error) {
	out := new(pb.StatusResponse)
	err := c.cc.Invoke(ctx, "/google.retail.common.grpc.Categories/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoriesServer is the server API for Categories service.
type CategoriesServer interface {
	Create(context.Context, *pb.Category) (*pb.Category, error)
	Update(context.Context, *pb.Category) (*pb.Category, error)
	GetCategory(context.Context, *pb.IDRequest) (*pb.Category, error)
	List(*fieldmaskpb.FieldMask, Categories_ListServer) error
	Delete(context.Context, *pb.IDRequest) (*pb.StatusResponse, error)
}

// UnimplementedCategoriesServer can be embedded to have forward compatible implementations.
type UnimplementedCategoriesServer struct {
}

func (*UnimplementedCategoriesServer) Create(context.Context, *pb.Category) (*pb.Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedCategoriesServer) Update(context.Context, *pb.Category) (*pb.Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedCategoriesServer) GetCategory(context.Context, *pb.IDRequest) (*pb.Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategory not implemented")
}
func (*UnimplementedCategoriesServer) List(*fieldmaskpb.FieldMask, Categories_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedCategoriesServer) Delete(context.Context, *pb.IDRequest) (*pb.StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterCategoriesServer(s *grpc.Server, srv CategoriesServer) {
	s.RegisterService(&_Categories_serviceDesc, srv)
}

func _Categories_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Category)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.common.grpc.Categories/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriesServer).Create(ctx, req.(*pb.Category))
	}
	return interceptor(ctx, in, info, handler)
}

func _Categories_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Category)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.common.grpc.Categories/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriesServer).Update(ctx, req.(*pb.Category))
	}
	return interceptor(ctx, in, info, handler)
}

func _Categories_GetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriesServer).GetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.common.grpc.Categories/GetCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriesServer).GetCategory(ctx, req.(*pb.IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Categories_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(fieldmaskpb.FieldMask)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CategoriesServer).List(m, &categoriesListServer{stream})
}

type Categories_ListServer interface {
	Send(*pb.Category) error
	grpc.ServerStream
}

type categoriesListServer struct {
	grpc.ServerStream
}

func (x *categoriesListServer) Send(m *pb.Category) error {
	return x.ServerStream.SendMsg(m)
}

func _Categories_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.common.grpc.Categories/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriesServer).Delete(ctx, req.(*pb.IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Categories_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.retail.common.grpc.Categories",
	HandlerType: (*CategoriesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Categories_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Categories_Update_Handler,
		},
		{
			MethodName: "GetCategory",
			Handler:    _Categories_GetCategory_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Categories_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Categories_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/common/service.proto",
}
