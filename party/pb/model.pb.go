// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.10
// source: api/party/model.proto

package pb

import (
	pb "github.com/GoogleCloudPlatform/retail-data-model/common/pb"
	enums "github.com/GoogleCloudPlatform/retail-data-model/enums"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PartyTemplate_Type int32

const (
	PartyTemplate_PERSON       PartyTemplate_Type = 0
	PartyTemplate_ORGANIZATION PartyTemplate_Type = 1
	PartyTemplate_HOUSEHOLD    PartyTemplate_Type = 2
	PartyTemplate_COMMUNITY    PartyTemplate_Type = 3
)

// Enum value maps for PartyTemplate_Type.
var (
	PartyTemplate_Type_name = map[int32]string{
		0: "PERSON",
		1: "ORGANIZATION",
		2: "HOUSEHOLD",
		3: "COMMUNITY",
	}
	PartyTemplate_Type_value = map[string]int32{
		"PERSON":       0,
		"ORGANIZATION": 1,
		"HOUSEHOLD":    2,
		"COMMUNITY":    3,
	}
)

func (x PartyTemplate_Type) Enum() *PartyTemplate_Type {
	p := new(PartyTemplate_Type)
	*p = x
	return p
}

func (x PartyTemplate_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartyTemplate_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_api_party_model_proto_enumTypes[0].Descriptor()
}

func (PartyTemplate_Type) Type() protoreflect.EnumType {
	return &file_api_party_model_proto_enumTypes[0]
}

func (x PartyTemplate_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartyTemplate_Type.Descriptor instead.
func (PartyTemplate_Type) EnumDescriptor() ([]byte, []int) {
	return file_api_party_model_proto_rawDescGZIP(), []int{0, 0}
}

type PartyRegistrationState_Registration int32

const (
	PartyRegistrationState_UNKNOWN_CONSUMER         PartyRegistrationState_Registration = 0
	PartyRegistrationState_REGISTERED_NOT_VALIDATED PartyRegistrationState_Registration = 1
	PartyRegistrationState_REGISTERED_VALIDATED     PartyRegistrationState_Registration = 2
	PartyRegistrationState_UNREGISTERED             PartyRegistrationState_Registration = 3
)

// Enum value maps for PartyRegistrationState_Registration.
var (
	PartyRegistrationState_Registration_name = map[int32]string{
		0: "UNKNOWN_CONSUMER",
		1: "REGISTERED_NOT_VALIDATED",
		2: "REGISTERED_VALIDATED",
		3: "UNREGISTERED",
	}
	PartyRegistrationState_Registration_value = map[string]int32{
		"UNKNOWN_CONSUMER":         0,
		"REGISTERED_NOT_VALIDATED": 1,
		"REGISTERED_VALIDATED":     2,
		"UNREGISTERED":             3,
	}
)

func (x PartyRegistrationState_Registration) Enum() *PartyRegistrationState_Registration {
	p := new(PartyRegistrationState_Registration)
	*p = x
	return p
}

func (x PartyRegistrationState_Registration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartyRegistrationState_Registration) Descriptor() protoreflect.EnumDescriptor {
	return file_api_party_model_proto_enumTypes[1].Descriptor()
}

func (PartyRegistrationState_Registration) Type() protoreflect.EnumType {
	return &file_api_party_model_proto_enumTypes[1]
}

func (x PartyRegistrationState_Registration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartyRegistrationState_Registration.Descriptor instead.
func (PartyRegistrationState_Registration) EnumDescriptor() ([]byte, []int) {
	return file_api_party_model_proto_rawDescGZIP(), []int{3, 0}
}

type PartyTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version     int32                  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	PartyTypeId PartyTemplate_Type     `protobuf:"varint,3,opt,name=party_type_id,json=partyTypeId,proto3,enum=google.retail.party.pb.PartyTemplate_Type" json:"party_type_id,omitempty"`
	Name        string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Fields      []*PartyTemplate_Field `protobuf:"bytes,6,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *PartyTemplate) Reset() {
	*x = PartyTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_party_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyTemplate) ProtoMessage() {}

func (x *PartyTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_api_party_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyTemplate.ProtoReflect.Descriptor instead.
func (*PartyTemplate) Descriptor() ([]byte, []int) {
	return file_api_party_model_proto_rawDescGZIP(), []int{0}
}

func (x *PartyTemplate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PartyTemplate) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *PartyTemplate) GetPartyTypeId() PartyTemplate_Type {
	if x != nil {
		return x.PartyTypeId
	}
	return PartyTemplate_PERSON
}

func (x *PartyTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PartyTemplate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PartyTemplate) GetFields() []*PartyTemplate_Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

type FieldValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FieldValue) Reset() {
	*x = FieldValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_party_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldValue) ProtoMessage() {}

func (x *FieldValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_party_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldValue.ProtoReflect.Descriptor instead.
func (*FieldValue) Descriptor() ([]byte, []int) {
	return file_api_party_model_proto_rawDescGZIP(), []int{1}
}

type Party struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  *pb.VersionID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PartyTemplateId     string        `protobuf:"bytes,2,opt,name=party_template_id,json=partyTemplateId,proto3" json:"party_template_id,omitempty"`
	PathTemplateVersion int32         `protobuf:"varint,3,opt,name=path_template_version,json=pathTemplateVersion,proto3" json:"path_template_version,omitempty"`
}

func (x *Party) Reset() {
	*x = Party{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_party_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Party) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Party) ProtoMessage() {}

func (x *Party) ProtoReflect() protoreflect.Message {
	mi := &file_api_party_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Party.ProtoReflect.Descriptor instead.
func (*Party) Descriptor() ([]byte, []int) {
	return file_api_party_model_proto_rawDescGZIP(), []int{2}
}

func (x *Party) GetId() *pb.VersionID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Party) GetPartyTemplateId() string {
	if x != nil {
		return x.PartyTemplateId
	}
	return ""
}

func (x *Party) GetPathTemplateVersion() int32 {
	if x != nil {
		return x.PathTemplateVersion
	}
	return 0
}

type PartyRegistrationState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *pb.VersionID                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PartyId        *pb.VersionID                       `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	Registration   PartyRegistrationState_Registration `protobuf:"varint,3,opt,name=registration,proto3,enum=google.retail.party.pb.PartyRegistrationState_Registration" json:"registration,omitempty"`
	EffectiveDate  *timestamppb.Timestamp              `protobuf:"bytes,4,opt,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	ExpirationDate *timestamppb.Timestamp              `protobuf:"bytes,5,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	DoNotCall      bool                                `protobuf:"varint,6,opt,name=do_not_call,json=doNotCall,proto3" json:"do_not_call,omitempty"`
	DoNotEmail     bool                                `protobuf:"varint,7,opt,name=do_not_email,json=doNotEmail,proto3" json:"do_not_email,omitempty"`
	DoNotShare     bool                                `protobuf:"varint,8,opt,name=do_not_share,json=doNotShare,proto3" json:"do_not_share,omitempty"`
	DoNotTrack     bool                                `protobuf:"varint,9,opt,name=do_not_track,json=doNotTrack,proto3" json:"do_not_track,omitempty"`
}

func (x *PartyRegistrationState) Reset() {
	*x = PartyRegistrationState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_party_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyRegistrationState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyRegistrationState) ProtoMessage() {}

func (x *PartyRegistrationState) ProtoReflect() protoreflect.Message {
	mi := &file_api_party_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyRegistrationState.ProtoReflect.Descriptor instead.
func (*PartyRegistrationState) Descriptor() ([]byte, []int) {
	return file_api_party_model_proto_rawDescGZIP(), []int{3}
}

func (x *PartyRegistrationState) GetId() *pb.VersionID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PartyRegistrationState) GetPartyId() *pb.VersionID {
	if x != nil {
		return x.PartyId
	}
	return nil
}

func (x *PartyRegistrationState) GetRegistration() PartyRegistrationState_Registration {
	if x != nil {
		return x.Registration
	}
	return PartyRegistrationState_UNKNOWN_CONSUMER
}

func (x *PartyRegistrationState) GetEffectiveDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectiveDate
	}
	return nil
}

func (x *PartyRegistrationState) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *PartyRegistrationState) GetDoNotCall() bool {
	if x != nil {
		return x.DoNotCall
	}
	return false
}

func (x *PartyRegistrationState) GetDoNotEmail() bool {
	if x != nil {
		return x.DoNotEmail
	}
	return false
}

func (x *PartyRegistrationState) GetDoNotShare() bool {
	if x != nil {
		return x.DoNotShare
	}
	return false
}

func (x *PartyRegistrationState) GetDoNotTrack() bool {
	if x != nil {
		return x.DoNotTrack
	}
	return false
}

type PartyRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *pb.VersionID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PartyRole) Reset() {
	*x = PartyRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_party_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyRole) ProtoMessage() {}

func (x *PartyRole) ProtoReflect() protoreflect.Message {
	mi := &file_api_party_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyRole.ProtoReflect.Descriptor instead.
func (*PartyRole) Descriptor() ([]byte, []int) {
	return file_api_party_model_proto_rawDescGZIP(), []int{4}
}

func (x *PartyRole) GetId() *pb.VersionID {
	if x != nil {
		return x.Id
	}
	return nil
}

type PartyIdentityDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *pb.VersionID     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	KeySet          map[string]string `protobuf:"bytes,2,rep,name=key_set,json=keySet,proto3" json:"key_set,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MetaDefinitions map[string]string `protobuf:"bytes,3,rep,name=meta_definitions,json=metaDefinitions,proto3" json:"meta_definitions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MetaValidations map[string]string `protobuf:"bytes,4,rep,name=meta_validations,json=metaValidations,proto3" json:"meta_validations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PartyIdentityDefinition) Reset() {
	*x = PartyIdentityDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_party_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyIdentityDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyIdentityDefinition) ProtoMessage() {}

func (x *PartyIdentityDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_api_party_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyIdentityDefinition.ProtoReflect.Descriptor instead.
func (*PartyIdentityDefinition) Descriptor() ([]byte, []int) {
	return file_api_party_model_proto_rawDescGZIP(), []int{5}
}

func (x *PartyIdentityDefinition) GetId() *pb.VersionID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PartyIdentityDefinition) GetKeySet() map[string]string {
	if x != nil {
		return x.KeySet
	}
	return nil
}

func (x *PartyIdentityDefinition) GetMetaDefinitions() map[string]string {
	if x != nil {
		return x.MetaDefinitions
	}
	return nil
}

func (x *PartyIdentityDefinition) GetMetaValidations() map[string]string {
	if x != nil {
		return x.MetaValidations
	}
	return nil
}

type PartyIdentification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId                              string            `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	PartyIdentificationDefinitionName    string            `protobuf:"bytes,2,opt,name=party_identification_definition_name,json=partyIdentificationDefinitionName,proto3" json:"party_identification_definition_name,omitempty"`
	PartyIdentificationDefinitionVersion int32             `protobuf:"varint,3,opt,name=party_identification_definition_version,json=partyIdentificationDefinitionVersion,proto3" json:"party_identification_definition_version,omitempty"`
	Values                               map[string]string `protobuf:"bytes,4,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PartyIdentification) Reset() {
	*x = PartyIdentification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_party_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyIdentification) ProtoMessage() {}

func (x *PartyIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_api_party_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyIdentification.ProtoReflect.Descriptor instead.
func (*PartyIdentification) Descriptor() ([]byte, []int) {
	return file_api_party_model_proto_rawDescGZIP(), []int{6}
}

func (x *PartyIdentification) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *PartyIdentification) GetPartyIdentificationDefinitionName() string {
	if x != nil {
		return x.PartyIdentificationDefinitionName
	}
	return ""
}

func (x *PartyIdentification) GetPartyIdentificationDefinitionVersion() int32 {
	if x != nil {
		return x.PartyIdentificationDefinitionVersion
	}
	return 0
}

func (x *PartyIdentification) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

type PartyRoleAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId         string                 `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	PartyRoleTypeId string                 `protobuf:"bytes,2,opt,name=party_role_type_id,json=partyRoleTypeId,proto3" json:"party_role_type_id,omitempty"`
	StatusCode      string                 `protobuf:"bytes,3,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	EffectiveDate   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	ExpirationDate  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
}

func (x *PartyRoleAssignment) Reset() {
	*x = PartyRoleAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_party_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyRoleAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyRoleAssignment) ProtoMessage() {}

func (x *PartyRoleAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_api_party_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyRoleAssignment.ProtoReflect.Descriptor instead.
func (*PartyRoleAssignment) Descriptor() ([]byte, []int) {
	return file_api_party_model_proto_rawDescGZIP(), []int{7}
}

func (x *PartyRoleAssignment) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *PartyRoleAssignment) GetPartyRoleTypeId() string {
	if x != nil {
		return x.PartyRoleTypeId
	}
	return ""
}

func (x *PartyRoleAssignment) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *PartyRoleAssignment) GetEffectiveDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectiveDate
	}
	return nil
}

func (x *PartyRoleAssignment) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

type OperationalParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PartyRoleAssignmentId string `protobuf:"bytes,2,opt,name=party_role_assignment_id,json=partyRoleAssignmentId,proto3" json:"party_role_assignment_id,omitempty"`
}

func (x *OperationalParty) Reset() {
	*x = OperationalParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_party_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationalParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationalParty) ProtoMessage() {}

func (x *OperationalParty) ProtoReflect() protoreflect.Message {
	mi := &file_api_party_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationalParty.ProtoReflect.Descriptor instead.
func (*OperationalParty) Descriptor() ([]byte, []int) {
	return file_api_party_model_proto_rawDescGZIP(), []int{8}
}

func (x *OperationalParty) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OperationalParty) GetPartyRoleAssignmentId() string {
	if x != nil {
		return x.PartyRoleAssignmentId
	}
	return ""
}

type EffectiveParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId        string                 `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	EffectiveDate  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	ExpirationDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
}

func (x *EffectiveParty) Reset() {
	*x = EffectiveParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_party_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffectiveParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffectiveParty) ProtoMessage() {}

func (x *EffectiveParty) ProtoReflect() protoreflect.Message {
	mi := &file_api_party_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffectiveParty.ProtoReflect.Descriptor instead.
func (*EffectiveParty) Descriptor() ([]byte, []int) {
	return file_api_party_model_proto_rawDescGZIP(), []int{9}
}

func (x *EffectiveParty) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *EffectiveParty) GetEffectiveDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectiveDate
	}
	return nil
}

func (x *EffectiveParty) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

type Household struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *EffectiveParty   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PrimaryCurrency      enums.Currency    `protobuf:"varint,3,opt,name=primary_currency,json=primaryCurrency,proto3,enum=google.retail.enums.currency.Currency" json:"primary_currency,omitempty"`
	HouseholdIncome      float64           `protobuf:"fixed64,4,opt,name=household_income,json=householdIncome,proto3" json:"household_income,omitempty"`
	AdditionalDimensions map[string]string `protobuf:"bytes,100,rep,name=additional_dimensions,json=additionalDimensions,proto3" json:"additional_dimensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Household) Reset() {
	*x = Household{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_party_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Household) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Household) ProtoMessage() {}

func (x *Household) ProtoReflect() protoreflect.Message {
	mi := &file_api_party_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Household.ProtoReflect.Descriptor instead.
func (*Household) Descriptor() ([]byte, []int) {
	return file_api_party_model_proto_rawDescGZIP(), []int{10}
}

func (x *Household) GetId() *EffectiveParty {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Household) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Household) GetPrimaryCurrency() enums.Currency {
	if x != nil {
		return x.PrimaryCurrency
	}
	return enums.Currency(0)
}

func (x *Household) GetHouseholdIncome() float64 {
	if x != nil {
		return x.HouseholdIncome
	}
	return 0
}

func (x *Household) GetAdditionalDimensions() map[string]string {
	if x != nil {
		return x.AdditionalDimensions
	}
	return nil
}

type Person struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                              *EffectiveParty        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LanguageId                      string                 `protobuf:"bytes,2,opt,name=language_id,json=languageId,proto3" json:"language_id,omitempty"`
	Title                           string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	FirstName                       string                 `protobuf:"bytes,4,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	FirstNameType                   string                 `protobuf:"bytes,5,opt,name=first_name_type,json=firstNameType,proto3" json:"first_name_type,omitempty"`
	MiddleName                      string                 `protobuf:"bytes,6,opt,name=middle_name,json=middleName,proto3" json:"middle_name,omitempty"`
	MiddleNameType                  string                 `protobuf:"bytes,7,opt,name=middle_name_type,json=middleNameType,proto3" json:"middle_name_type,omitempty"`
	LastName                        string                 `protobuf:"bytes,8,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	LastNameType                    string                 `protobuf:"bytes,9,opt,name=last_name_type,json=lastNameType,proto3" json:"last_name_type,omitempty"`
	Suffix                          string                 `protobuf:"bytes,10,opt,name=suffix,proto3" json:"suffix,omitempty"`
	SortingName                     string                 `protobuf:"bytes,11,opt,name=sorting_name,json=sortingName,proto3" json:"sorting_name,omitempty"`
	MailingName                     string                 `protobuf:"bytes,12,opt,name=mailing_name,json=mailingName,proto3" json:"mailing_name,omitempty"`
	OfficialName                    string                 `protobuf:"bytes,13,opt,name=official_name,json=officialName,proto3" json:"official_name,omitempty"`
	Gender                          enums.Gender           `protobuf:"varint,30,opt,name=gender,proto3,enum=google.retail.enums.party.Gender" json:"gender,omitempty"`
	Pronoun                         enums.Pronoun          `protobuf:"varint,31,opt,name=pronoun,proto3,enum=google.retail.enums.party.Pronoun" json:"pronoun,omitempty"`
	MaritalStatus                   enums.MaritalStatus    `protobuf:"varint,32,opt,name=marital_status,json=maritalStatus,proto3,enum=google.retail.enums.party.MaritalStatus" json:"marital_status,omitempty"`
	LifeStage                       enums.LifeStage        `protobuf:"varint,33,opt,name=life_stage,json=lifeStage,proto3,enum=google.retail.enums.party.LifeStage" json:"life_stage,omitempty"`
	Race                            enums.Race             `protobuf:"varint,34,opt,name=race,proto3,enum=google.retail.enums.party.Race" json:"race,omitempty"`
	Ethnicity                       enums.Ethnicity        `protobuf:"varint,35,opt,name=ethnicity,proto3,enum=google.retail.enums.party.Ethnicity" json:"ethnicity,omitempty"`
	ReligionGroup                   enums.ReligionGroup    `protobuf:"varint,36,opt,name=religion_group,json=religionGroup,proto3,enum=google.retail.enums.party.ReligionGroup" json:"religion_group,omitempty"`
	Religion                        enums.Religion         `protobuf:"varint,37,opt,name=religion,proto3,enum=google.retail.enums.party.Religion" json:"religion,omitempty"`
	EmploymentStatus                enums.EmploymentStatus `protobuf:"varint,38,opt,name=employment_status,json=employmentStatus,proto3,enum=google.retail.enums.party.EmploymentStatus" json:"employment_status,omitempty"`
	Occupation                      enums.Occupation       `protobuf:"varint,39,opt,name=occupation,proto3,enum=google.retail.enums.party.Occupation" json:"occupation,omitempty"`
	PrimaryCurrency                 enums.Currency         `protobuf:"varint,40,opt,name=primary_currency,json=primaryCurrency,proto3,enum=google.retail.enums.currency.Currency" json:"primary_currency,omitempty"`
	AnnualIncomeRange               string                 `protobuf:"bytes,100,opt,name=annual_income_range,json=annualIncomeRange,proto3" json:"annual_income_range,omitempty"`
	DisabilityImpairmentType        string                 `protobuf:"bytes,101,opt,name=disability_impairment_type,json=disabilityImpairmentType,proto3" json:"disability_impairment_type,omitempty"`
	PersonalityType                 string                 `protobuf:"bytes,102,opt,name=personality_type,json=personalityType,proto3" json:"personality_type,omitempty"`
	LifestyleType                   string                 `protobuf:"bytes,103,opt,name=lifestyle_type,json=lifestyleType,proto3" json:"lifestyle_type,omitempty"`
	PersonalValueType               string                 `protobuf:"bytes,104,opt,name=personal_value_type,json=personalValueType,proto3" json:"personal_value_type,omitempty"`
	ValueAttitudeLifestyleType      string                 `protobuf:"bytes,105,opt,name=value_attitude_lifestyle_type,json=valueAttitudeLifestyleType,proto3" json:"value_attitude_lifestyle_type,omitempty"`
	DietaryHabitType                string                 `protobuf:"bytes,106,opt,name=dietary_habit_type,json=dietaryHabitType,proto3" json:"dietary_habit_type,omitempty"`
	ConsumerCreditScore             string                 `protobuf:"bytes,107,opt,name=consumer_credit_score,json=consumerCreditScore,proto3" json:"consumer_credit_score,omitempty"`
	ConsumerCreditRatingServiceName string                 `protobuf:"bytes,108,opt,name=consumer_credit_rating_service_name,json=consumerCreditRatingServiceName,proto3" json:"consumer_credit_rating_service_name,omitempty"`
	AdditionalDimensions            map[string]string      `protobuf:"bytes,200,rep,name=additional_dimensions,json=additionalDimensions,proto3" json:"additional_dimensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Person) Reset() {
	*x = Person{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_party_model_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Person) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person) ProtoMessage() {}

func (x *Person) ProtoReflect() protoreflect.Message {
	mi := &file_api_party_model_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person.ProtoReflect.Descriptor instead.
func (*Person) Descriptor() ([]byte, []int) {
	return file_api_party_model_proto_rawDescGZIP(), []int{11}
}

func (x *Person) GetId() *EffectiveParty {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Person) GetLanguageId() string {
	if x != nil {
		return x.LanguageId
	}
	return ""
}

func (x *Person) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Person) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Person) GetFirstNameType() string {
	if x != nil {
		return x.FirstNameType
	}
	return ""
}

func (x *Person) GetMiddleName() string {
	if x != nil {
		return x.MiddleName
	}
	return ""
}

func (x *Person) GetMiddleNameType() string {
	if x != nil {
		return x.MiddleNameType
	}
	return ""
}

func (x *Person) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Person) GetLastNameType() string {
	if x != nil {
		return x.LastNameType
	}
	return ""
}

func (x *Person) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *Person) GetSortingName() string {
	if x != nil {
		return x.SortingName
	}
	return ""
}

func (x *Person) GetMailingName() string {
	if x != nil {
		return x.MailingName
	}
	return ""
}

func (x *Person) GetOfficialName() string {
	if x != nil {
		return x.OfficialName
	}
	return ""
}

func (x *Person) GetGender() enums.Gender {
	if x != nil {
		return x.Gender
	}
	return enums.Gender(0)
}

func (x *Person) GetPronoun() enums.Pronoun {
	if x != nil {
		return x.Pronoun
	}
	return enums.Pronoun(0)
}

func (x *Person) GetMaritalStatus() enums.MaritalStatus {
	if x != nil {
		return x.MaritalStatus
	}
	return enums.MaritalStatus(0)
}

func (x *Person) GetLifeStage() enums.LifeStage {
	if x != nil {
		return x.LifeStage
	}
	return enums.LifeStage(0)
}

func (x *Person) GetRace() enums.Race {
	if x != nil {
		return x.Race
	}
	return enums.Race(0)
}

func (x *Person) GetEthnicity() enums.Ethnicity {
	if x != nil {
		return x.Ethnicity
	}
	return enums.Ethnicity(0)
}

func (x *Person) GetReligionGroup() enums.ReligionGroup {
	if x != nil {
		return x.ReligionGroup
	}
	return enums.ReligionGroup(0)
}

func (x *Person) GetReligion() enums.Religion {
	if x != nil {
		return x.Religion
	}
	return enums.Religion(0)
}

func (x *Person) GetEmploymentStatus() enums.EmploymentStatus {
	if x != nil {
		return x.EmploymentStatus
	}
	return enums.EmploymentStatus(0)
}

func (x *Person) GetOccupation() enums.Occupation {
	if x != nil {
		return x.Occupation
	}
	return enums.Occupation(0)
}

func (x *Person) GetPrimaryCurrency() enums.Currency {
	if x != nil {
		return x.PrimaryCurrency
	}
	return enums.Currency(0)
}

func (x *Person) GetAnnualIncomeRange() string {
	if x != nil {
		return x.AnnualIncomeRange
	}
	return ""
}

func (x *Person) GetDisabilityImpairmentType() string {
	if x != nil {
		return x.DisabilityImpairmentType
	}
	return ""
}

func (x *Person) GetPersonalityType() string {
	if x != nil {
		return x.PersonalityType
	}
	return ""
}

func (x *Person) GetLifestyleType() string {
	if x != nil {
		return x.LifestyleType
	}
	return ""
}

func (x *Person) GetPersonalValueType() string {
	if x != nil {
		return x.PersonalValueType
	}
	return ""
}

func (x *Person) GetValueAttitudeLifestyleType() string {
	if x != nil {
		return x.ValueAttitudeLifestyleType
	}
	return ""
}

func (x *Person) GetDietaryHabitType() string {
	if x != nil {
		return x.DietaryHabitType
	}
	return ""
}

func (x *Person) GetConsumerCreditScore() string {
	if x != nil {
		return x.ConsumerCreditScore
	}
	return ""
}

func (x *Person) GetConsumerCreditRatingServiceName() string {
	if x != nil {
		return x.ConsumerCreditRatingServiceName
	}
	return ""
}

func (x *Person) GetAdditionalDimensions() map[string]string {
	if x != nil {
		return x.AdditionalDimensions
	}
	return nil
}

type Organization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        *EffectiveParty              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LegalName                 string                       `protobuf:"bytes,2,opt,name=legal_name,json=legalName,proto3" json:"legal_name,omitempty"`
	TradeName                 string                       `protobuf:"bytes,3,opt,name=trade_name,json=tradeName,proto3" json:"trade_name,omitempty"`
	BusinessActivity          string                       `protobuf:"bytes,4,opt,name=business_activity,json=businessActivity,proto3" json:"business_activity,omitempty"`
	BusinessClassification    enums.BusinessClassification `protobuf:"varint,5,opt,name=business_classification,json=businessClassification,proto3,enum=google.retail.enums.party.BusinessClassification" json:"business_classification,omitempty"`
	Jurisdiction              string                       `protobuf:"bytes,6,opt,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
	OpenForBusiness           *timestamppb.Timestamp       `protobuf:"bytes,7,opt,name=open_for_business,json=openForBusiness,proto3" json:"open_for_business,omitempty"`
	ClosedForBusiness         *timestamppb.Timestamp       `protobuf:"bytes,8,opt,name=closed_for_business,json=closedForBusiness,proto3" json:"closed_for_business,omitempty"`
	IncorporationDate         *timestamppb.Timestamp       `protobuf:"bytes,9,opt,name=incorporation_date,json=incorporationDate,proto3" json:"incorporation_date,omitempty"`
	FiscalYearEndDate         *timestamppb.Timestamp       `protobuf:"bytes,10,opt,name=fiscal_year_end_date,json=fiscalYearEndDate,proto3" json:"fiscal_year_end_date,omitempty"`
	PrimaryLanguage           enums.Language               `protobuf:"varint,11,opt,name=primary_language,json=primaryLanguage,proto3,enum=google.retail.enums.lang.Language" json:"primary_language,omitempty"`
	SupportedLanguages        []enums.Language             `protobuf:"varint,12,rep,packed,name=supported_languages,json=supportedLanguages,proto3,enum=google.retail.enums.lang.Language" json:"supported_languages,omitempty"`
	PrimaryCurrency           enums.Currency               `protobuf:"varint,13,opt,name=primary_currency,json=primaryCurrency,proto3,enum=google.retail.enums.currency.Currency" json:"primary_currency,omitempty"`
	LocalAnnualRevenueAmount  float64                      `protobuf:"fixed64,14,opt,name=local_annual_revenue_amount,json=localAnnualRevenueAmount,proto3" json:"local_annual_revenue_amount,omitempty"`
	GlobalAnnualRevenueAmount float64                      `protobuf:"fixed64,15,opt,name=global_annual_revenue_amount,json=globalAnnualRevenueAmount,proto3" json:"global_annual_revenue_amount,omitempty"`
	LocalEmployeeCount        int32                        `protobuf:"varint,16,opt,name=local_employee_count,json=localEmployeeCount,proto3" json:"local_employee_count,omitempty"`
	GlobalEmployeeCount       int32                        `protobuf:"varint,17,opt,name=global_employee_count,json=globalEmployeeCount,proto3" json:"global_employee_count,omitempty"`
	ReligionGroup             enums.ReligionGroup          `protobuf:"varint,50,opt,name=religion_group,json=religionGroup,proto3,enum=google.retail.enums.party.ReligionGroup" json:"religion_group,omitempty"`
	Religion                  enums.Religion               `protobuf:"varint,51,opt,name=religion,proto3,enum=google.retail.enums.party.Religion" json:"religion,omitempty"`
	Bankruptcy                bool                         `protobuf:"varint,100,opt,name=bankruptcy,proto3" json:"bankruptcy,omitempty"`
	DunsInformation           bool                         `protobuf:"varint,101,opt,name=duns_information,json=dunsInformation,proto3" json:"duns_information,omitempty"`
	AdditionalDimensions      map[string]string            `protobuf:"bytes,200,rep,name=additional_dimensions,json=additionalDimensions,proto3" json:"additional_dimensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Organization) Reset() {
	*x = Organization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_party_model_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organization) ProtoMessage() {}

func (x *Organization) ProtoReflect() protoreflect.Message {
	mi := &file_api_party_model_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organization.ProtoReflect.Descriptor instead.
func (*Organization) Descriptor() ([]byte, []int) {
	return file_api_party_model_proto_rawDescGZIP(), []int{12}
}

func (x *Organization) GetId() *EffectiveParty {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Organization) GetLegalName() string {
	if x != nil {
		return x.LegalName
	}
	return ""
}

func (x *Organization) GetTradeName() string {
	if x != nil {
		return x.TradeName
	}
	return ""
}

func (x *Organization) GetBusinessActivity() string {
	if x != nil {
		return x.BusinessActivity
	}
	return ""
}

func (x *Organization) GetBusinessClassification() enums.BusinessClassification {
	if x != nil {
		return x.BusinessClassification
	}
	return enums.BusinessClassification(0)
}

func (x *Organization) GetJurisdiction() string {
	if x != nil {
		return x.Jurisdiction
	}
	return ""
}

func (x *Organization) GetOpenForBusiness() *timestamppb.Timestamp {
	if x != nil {
		return x.OpenForBusiness
	}
	return nil
}

func (x *Organization) GetClosedForBusiness() *timestamppb.Timestamp {
	if x != nil {
		return x.ClosedForBusiness
	}
	return nil
}

func (x *Organization) GetIncorporationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IncorporationDate
	}
	return nil
}

func (x *Organization) GetFiscalYearEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.FiscalYearEndDate
	}
	return nil
}

func (x *Organization) GetPrimaryLanguage() enums.Language {
	if x != nil {
		return x.PrimaryLanguage
	}
	return enums.Language(0)
}

func (x *Organization) GetSupportedLanguages() []enums.Language {
	if x != nil {
		return x.SupportedLanguages
	}
	return nil
}

func (x *Organization) GetPrimaryCurrency() enums.Currency {
	if x != nil {
		return x.PrimaryCurrency
	}
	return enums.Currency(0)
}

func (x *Organization) GetLocalAnnualRevenueAmount() float64 {
	if x != nil {
		return x.LocalAnnualRevenueAmount
	}
	return 0
}

func (x *Organization) GetGlobalAnnualRevenueAmount() float64 {
	if x != nil {
		return x.GlobalAnnualRevenueAmount
	}
	return 0
}

func (x *Organization) GetLocalEmployeeCount() int32 {
	if x != nil {
		return x.LocalEmployeeCount
	}
	return 0
}

func (x *Organization) GetGlobalEmployeeCount() int32 {
	if x != nil {
		return x.GlobalEmployeeCount
	}
	return 0
}

func (x *Organization) GetReligionGroup() enums.ReligionGroup {
	if x != nil {
		return x.ReligionGroup
	}
	return enums.ReligionGroup(0)
}

func (x *Organization) GetReligion() enums.Religion {
	if x != nil {
		return x.Religion
	}
	return enums.Religion(0)
}

func (x *Organization) GetBankruptcy() bool {
	if x != nil {
		return x.Bankruptcy
	}
	return false
}

func (x *Organization) GetDunsInformation() bool {
	if x != nil {
		return x.DunsInformation
	}
	return false
}

func (x *Organization) GetAdditionalDimensions() map[string]string {
	if x != nil {
		return x.AdditionalDimensions
	}
	return nil
}

type OrganizationDUNSInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *EffectiveParty `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DunsNumber string          `protobuf:"bytes,2,opt,name=duns_number,json=dunsNumber,proto3" json:"duns_number,omitempty"`
	DunsRating string          `protobuf:"bytes,3,opt,name=duns_rating,json=dunsRating,proto3" json:"duns_rating,omitempty"`
}

func (x *OrganizationDUNSInformation) Reset() {
	*x = OrganizationDUNSInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_party_model_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationDUNSInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationDUNSInformation) ProtoMessage() {}

func (x *OrganizationDUNSInformation) ProtoReflect() protoreflect.Message {
	mi := &file_api_party_model_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationDUNSInformation.ProtoReflect.Descriptor instead.
func (*OrganizationDUNSInformation) Descriptor() ([]byte, []int) {
	return file_api_party_model_proto_rawDescGZIP(), []int{13}
}

func (x *OrganizationDUNSInformation) GetId() *EffectiveParty {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *OrganizationDUNSInformation) GetDunsNumber() string {
	if x != nil {
		return x.DunsNumber
	}
	return ""
}

func (x *OrganizationDUNSInformation) GetDunsRating() string {
	if x != nil {
		return x.DunsRating
	}
	return ""
}

type OrganizationBankruptcy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    *EffectiveParty        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Date                  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	EmergenceDate         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=emergence_date,json=emergenceDate,proto3" json:"emergence_date,omitempty"`
	Bankruptcy            enums.Bankruptcy       `protobuf:"varint,4,opt,name=bankruptcy,proto3,enum=google.retail.enums.party.Bankruptcy" json:"bankruptcy,omitempty"`
	AdditionalInformation string                 `protobuf:"bytes,5,opt,name=additional_information,json=additionalInformation,proto3" json:"additional_information,omitempty"`
}

func (x *OrganizationBankruptcy) Reset() {
	*x = OrganizationBankruptcy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_party_model_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationBankruptcy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationBankruptcy) ProtoMessage() {}

func (x *OrganizationBankruptcy) ProtoReflect() protoreflect.Message {
	mi := &file_api_party_model_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationBankruptcy.ProtoReflect.Descriptor instead.
func (*OrganizationBankruptcy) Descriptor() ([]byte, []int) {
	return file_api_party_model_proto_rawDescGZIP(), []int{14}
}

func (x *OrganizationBankruptcy) GetId() *EffectiveParty {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *OrganizationBankruptcy) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *OrganizationBankruptcy) GetEmergenceDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EmergenceDate
	}
	return nil
}

func (x *OrganizationBankruptcy) GetBankruptcy() enums.Bankruptcy {
	if x != nil {
		return x.Bankruptcy
	}
	return enums.Bankruptcy(0)
}

func (x *OrganizationBankruptcy) GetAdditionalInformation() string {
	if x != nil {
		return x.AdditionalInformation
	}
	return ""
}

type Community struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *EffectiveParty   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string            `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	PrimaryCurrency      enums.Currency    `protobuf:"varint,3,opt,name=primary_currency,json=primaryCurrency,proto3,enum=google.retail.enums.currency.Currency" json:"primary_currency,omitempty"`
	AdditionalDimensions map[string]string `protobuf:"bytes,100,rep,name=additional_dimensions,json=additionalDimensions,proto3" json:"additional_dimensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Community) Reset() {
	*x = Community{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_party_model_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Community) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Community) ProtoMessage() {}

func (x *Community) ProtoReflect() protoreflect.Message {
	mi := &file_api_party_model_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Community.ProtoReflect.Descriptor instead.
func (*Community) Descriptor() ([]byte, []int) {
	return file_api_party_model_proto_rawDescGZIP(), []int{15}
}

func (x *Community) GetId() *EffectiveParty {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Community) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Community) GetPrimaryCurrency() enums.Currency {
	if x != nil {
		return x.PrimaryCurrency
	}
	return enums.Currency(0)
}

func (x *Community) GetAdditionalDimensions() map[string]string {
	if x != nil {
		return x.AdditionalDimensions
	}
	return nil
}

type PartyTemplate_Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Required        bool   `protobuf:"varint,1,opt,name=required,proto3" json:"required,omitempty"`
	Repeatable      bool   `protobuf:"varint,2,opt,name=repeatable,proto3" json:"repeatable,omitempty"`
	ValidationRegex string `protobuf:"bytes,3,opt,name=validation_regex,json=validationRegex,proto3" json:"validation_regex,omitempty"`
	Name            string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description     string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *PartyTemplate_Field) Reset() {
	*x = PartyTemplate_Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_party_model_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyTemplate_Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyTemplate_Field) ProtoMessage() {}

func (x *PartyTemplate_Field) ProtoReflect() protoreflect.Message {
	mi := &file_api_party_model_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyTemplate_Field.ProtoReflect.Descriptor instead.
func (*PartyTemplate_Field) Descriptor() ([]byte, []int) {
	return file_api_party_model_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PartyTemplate_Field) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *PartyTemplate_Field) GetRepeatable() bool {
	if x != nil {
		return x.Repeatable
	}
	return false
}

func (x *PartyTemplate_Field) GetValidationRegex() string {
	if x != nil {
		return x.ValidationRegex
	}
	return ""
}

func (x *PartyTemplate_Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PartyTemplate_Field) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

var File_api_party_model_proto protoreflect.FileDescriptor

var file_api_party_model_proto_rawDesc = []byte{
	0x0a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x70, 0x62, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x16, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x61, 0x70, 0x69, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xef, 0x03, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0d, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x43, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0xa4, 0x01, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x42, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x48, 0x4f, 0x4c, 0x44,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x10,
	0x03, 0x22, 0x0c, 0x0a, 0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x9b, 0x01, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x70, 0x61, 0x74, 0x68, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xea, 0x04,
	0x0a, 0x16, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x08,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x0c, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0e,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x43, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x6f, 0x4e, 0x6f, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x6f, 0x4e, 0x6f,
	0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x6f,
	0x4e, 0x6f, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x6f, 0x5f, 0x6e,
	0x6f, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x22, 0x6e, 0x0a, 0x0c, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x10, 0x00,
	0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x03, 0x22, 0x3f, 0x0a, 0x09, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc8, 0x04, 0x0a, 0x17,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x54, 0x0a, 0x07, 0x6b,
	0x65, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65,
	0x79, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x53, 0x65,
	0x74, 0x12, 0x6f, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x6f, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42,
	0x0a, 0x14, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x65, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe4, 0x02, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x24, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x27, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x24, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4f, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x86, 0x02,
	0x0a, 0x13, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x41,
	0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0x5b, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x0e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0x96, 0x03, 0x0a, 0x09, 0x48, 0x6f,
	0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x12, 0x70, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x47, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x05,
	0x10, 0x64, 0x22, 0x8c, 0x0f, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x36, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e,
	0x70, 0x62, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x3c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x50, 0x72, 0x6f,
	0x6e, 0x6f, 0x75, 0x6e, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x6e, 0x12, 0x4f, 0x0a,
	0x0e, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x2e, 0x4d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0d, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43,
	0x0a, 0x0a, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x4c,
	0x69, 0x66, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x72, 0x61, 0x63, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x52, 0x61,
	0x63, 0x65, 0x52, 0x04, 0x72, 0x61, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x65, 0x74, 0x68, 0x6e,
	0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x45, 0x74, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x74,
	0x79, 0x52, 0x09, 0x65, 0x74, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x0e,
	0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x2e, 0x52, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d,
	0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3f, 0x0a,
	0x08, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x52, 0x65, 0x6c, 0x69,
	0x67, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x58,
	0x0a, 0x11, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x0a, 0x6f, 0x63, 0x63, 0x75,
	0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x6d, 0x70, 0x61, 0x69, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x64, 0x69, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x69, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x41, 0x74, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x65, 0x74, 0x61, 0x72, 0x79,
	0x5f, 0x68, 0x61, 0x62, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x6a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x64, 0x69, 0x65, 0x74, 0x61, 0x72, 0x79, 0x48, 0x61, 0x62, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x6b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x4c, 0x0a, 0x23, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x6c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6e, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xc8,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x70, 0x62, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x47, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04,
	0x08, 0x0e, 0x10, 0x1e, 0x4a, 0x04, 0x08, 0x29, 0x10, 0x64, 0x4a, 0x05, 0x08, 0x6d, 0x10, 0xc8,
	0x01, 0x22, 0xf9, 0x0b, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x6a, 0x0a, 0x17, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x6f, 0x70,
	0x65, 0x6e, 0x46, 0x6f, 0x72, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x4a, 0x0a,
	0x13, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x46, 0x6f,
	0x72, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x69, 0x6e, 0x63,
	0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x14, 0x66, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x5f, 0x79,
	0x65, 0x61, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11,
	0x66, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x59, 0x65, 0x61, 0x72, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x4d, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52,
	0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x53, 0x0a, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x52, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3d, 0x0a, 0x1b, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x5f, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4f,
	0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x2e, 0x52, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x0d, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x3f, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x52, 0x65,
	0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x72, 0x75, 0x70, 0x74, 0x63, 0x79, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x72, 0x75, 0x70, 0x74, 0x63, 0x79,
	0x12, 0x29, 0x0a, 0x10, 0x64, 0x75, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x75, 0x6e, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x15, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0xc8, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x47, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x12, 0x10, 0x32,
	0x4a, 0x04, 0x08, 0x34, 0x10, 0x64, 0x4a, 0x05, 0x08, 0x66, 0x10, 0xc8, 0x01, 0x22, 0x97, 0x01,
	0x0a, 0x1b, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x55,
	0x4e, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e,
	0x70, 0x62, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x6e, 0x73, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x75, 0x6e, 0x73,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x6e, 0x73, 0x5f, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x75, 0x6e,
	0x73, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xc1, 0x02, 0x0a, 0x16, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6e, 0x6b, 0x72, 0x75, 0x70, 0x74,
	0x63, 0x79, 0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d,
	0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a,
	0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x72, 0x75, 0x70, 0x74, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x42, 0x61,
	0x6e, 0x6b, 0x72, 0x75, 0x70, 0x74, 0x63, 0x79, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x72, 0x75,
	0x70, 0x74, 0x63, 0x79, 0x12, 0x35, 0x0a, 0x16, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xeb, 0x02, 0x0a, 0x09,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x70, 0x62, 0x2e, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x70, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x47, 0x0a, 0x19, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x64, 0x42, 0x59, 0x0a, 0x1a, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x2e, 0x70, 0x62, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_party_model_proto_rawDescOnce sync.Once
	file_api_party_model_proto_rawDescData = file_api_party_model_proto_rawDesc
)

func file_api_party_model_proto_rawDescGZIP() []byte {
	file_api_party_model_proto_rawDescOnce.Do(func() {
		file_api_party_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_party_model_proto_rawDescData)
	})
	return file_api_party_model_proto_rawDescData
}

var file_api_party_model_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_party_model_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_api_party_model_proto_goTypes = []interface{}{
	(PartyTemplate_Type)(0),                  // 0: google.retail.party.pb.PartyTemplate.Type
	(PartyRegistrationState_Registration)(0), // 1: google.retail.party.pb.PartyRegistrationState.Registration
	(*PartyTemplate)(nil),                    // 2: google.retail.party.pb.PartyTemplate
	(*FieldValue)(nil),                       // 3: google.retail.party.pb.FieldValue
	(*Party)(nil),                            // 4: google.retail.party.pb.Party
	(*PartyRegistrationState)(nil),           // 5: google.retail.party.pb.PartyRegistrationState
	(*PartyRole)(nil),                        // 6: google.retail.party.pb.PartyRole
	(*PartyIdentityDefinition)(nil),          // 7: google.retail.party.pb.PartyIdentityDefinition
	(*PartyIdentification)(nil),              // 8: google.retail.party.pb.PartyIdentification
	(*PartyRoleAssignment)(nil),              // 9: google.retail.party.pb.PartyRoleAssignment
	(*OperationalParty)(nil),                 // 10: google.retail.party.pb.OperationalParty
	(*EffectiveParty)(nil),                   // 11: google.retail.party.pb.EffectiveParty
	(*Household)(nil),                        // 12: google.retail.party.pb.Household
	(*Person)(nil),                           // 13: google.retail.party.pb.Person
	(*Organization)(nil),                     // 14: google.retail.party.pb.Organization
	(*OrganizationDUNSInformation)(nil),      // 15: google.retail.party.pb.OrganizationDUNSInformation
	(*OrganizationBankruptcy)(nil),           // 16: google.retail.party.pb.OrganizationBankruptcy
	(*Community)(nil),                        // 17: google.retail.party.pb.Community
	(*PartyTemplate_Field)(nil),              // 18: google.retail.party.pb.PartyTemplate.Field
	nil,                                      // 19: google.retail.party.pb.PartyIdentityDefinition.KeySetEntry
	nil,                                      // 20: google.retail.party.pb.PartyIdentityDefinition.MetaDefinitionsEntry
	nil,                                      // 21: google.retail.party.pb.PartyIdentityDefinition.MetaValidationsEntry
	nil,                                      // 22: google.retail.party.pb.PartyIdentification.ValuesEntry
	nil,                                      // 23: google.retail.party.pb.Household.AdditionalDimensionsEntry
	nil,                                      // 24: google.retail.party.pb.Person.AdditionalDimensionsEntry
	nil,                                      // 25: google.retail.party.pb.Organization.AdditionalDimensionsEntry
	nil,                                      // 26: google.retail.party.pb.Community.AdditionalDimensionsEntry
	(*pb.VersionID)(nil),                     // 27: google.retail.common.pb.VersionID
	(*timestamppb.Timestamp)(nil),            // 28: google.protobuf.Timestamp
	(enums.Currency)(0),                      // 29: google.retail.enums.currency.Currency
	(enums.Gender)(0),                        // 30: google.retail.enums.party.Gender
	(enums.Pronoun)(0),                       // 31: google.retail.enums.party.Pronoun
	(enums.MaritalStatus)(0),                 // 32: google.retail.enums.party.MaritalStatus
	(enums.LifeStage)(0),                     // 33: google.retail.enums.party.LifeStage
	(enums.Race)(0),                          // 34: google.retail.enums.party.Race
	(enums.Ethnicity)(0),                     // 35: google.retail.enums.party.Ethnicity
	(enums.ReligionGroup)(0),                 // 36: google.retail.enums.party.ReligionGroup
	(enums.Religion)(0),                      // 37: google.retail.enums.party.Religion
	(enums.EmploymentStatus)(0),              // 38: google.retail.enums.party.EmploymentStatus
	(enums.Occupation)(0),                    // 39: google.retail.enums.party.Occupation
	(enums.BusinessClassification)(0),        // 40: google.retail.enums.party.BusinessClassification
	(enums.Language)(0),                      // 41: google.retail.enums.lang.Language
	(enums.Bankruptcy)(0),                    // 42: google.retail.enums.party.Bankruptcy
}
var file_api_party_model_proto_depIdxs = []int32{
	0,  // 0: google.retail.party.pb.PartyTemplate.party_type_id:type_name -> google.retail.party.pb.PartyTemplate.Type
	18, // 1: google.retail.party.pb.PartyTemplate.fields:type_name -> google.retail.party.pb.PartyTemplate.Field
	27, // 2: google.retail.party.pb.Party.id:type_name -> google.retail.common.pb.VersionID
	27, // 3: google.retail.party.pb.PartyRegistrationState.id:type_name -> google.retail.common.pb.VersionID
	27, // 4: google.retail.party.pb.PartyRegistrationState.party_id:type_name -> google.retail.common.pb.VersionID
	1,  // 5: google.retail.party.pb.PartyRegistrationState.registration:type_name -> google.retail.party.pb.PartyRegistrationState.Registration
	28, // 6: google.retail.party.pb.PartyRegistrationState.effective_date:type_name -> google.protobuf.Timestamp
	28, // 7: google.retail.party.pb.PartyRegistrationState.expiration_date:type_name -> google.protobuf.Timestamp
	27, // 8: google.retail.party.pb.PartyRole.id:type_name -> google.retail.common.pb.VersionID
	27, // 9: google.retail.party.pb.PartyIdentityDefinition.id:type_name -> google.retail.common.pb.VersionID
	19, // 10: google.retail.party.pb.PartyIdentityDefinition.key_set:type_name -> google.retail.party.pb.PartyIdentityDefinition.KeySetEntry
	20, // 11: google.retail.party.pb.PartyIdentityDefinition.meta_definitions:type_name -> google.retail.party.pb.PartyIdentityDefinition.MetaDefinitionsEntry
	21, // 12: google.retail.party.pb.PartyIdentityDefinition.meta_validations:type_name -> google.retail.party.pb.PartyIdentityDefinition.MetaValidationsEntry
	22, // 13: google.retail.party.pb.PartyIdentification.values:type_name -> google.retail.party.pb.PartyIdentification.ValuesEntry
	28, // 14: google.retail.party.pb.PartyRoleAssignment.effective_date:type_name -> google.protobuf.Timestamp
	28, // 15: google.retail.party.pb.PartyRoleAssignment.expiration_date:type_name -> google.protobuf.Timestamp
	28, // 16: google.retail.party.pb.EffectiveParty.effective_date:type_name -> google.protobuf.Timestamp
	28, // 17: google.retail.party.pb.EffectiveParty.expiration_date:type_name -> google.protobuf.Timestamp
	11, // 18: google.retail.party.pb.Household.id:type_name -> google.retail.party.pb.EffectiveParty
	29, // 19: google.retail.party.pb.Household.primary_currency:type_name -> google.retail.enums.currency.Currency
	23, // 20: google.retail.party.pb.Household.additional_dimensions:type_name -> google.retail.party.pb.Household.AdditionalDimensionsEntry
	11, // 21: google.retail.party.pb.Person.id:type_name -> google.retail.party.pb.EffectiveParty
	30, // 22: google.retail.party.pb.Person.gender:type_name -> google.retail.enums.party.Gender
	31, // 23: google.retail.party.pb.Person.pronoun:type_name -> google.retail.enums.party.Pronoun
	32, // 24: google.retail.party.pb.Person.marital_status:type_name -> google.retail.enums.party.MaritalStatus
	33, // 25: google.retail.party.pb.Person.life_stage:type_name -> google.retail.enums.party.LifeStage
	34, // 26: google.retail.party.pb.Person.race:type_name -> google.retail.enums.party.Race
	35, // 27: google.retail.party.pb.Person.ethnicity:type_name -> google.retail.enums.party.Ethnicity
	36, // 28: google.retail.party.pb.Person.religion_group:type_name -> google.retail.enums.party.ReligionGroup
	37, // 29: google.retail.party.pb.Person.religion:type_name -> google.retail.enums.party.Religion
	38, // 30: google.retail.party.pb.Person.employment_status:type_name -> google.retail.enums.party.EmploymentStatus
	39, // 31: google.retail.party.pb.Person.occupation:type_name -> google.retail.enums.party.Occupation
	29, // 32: google.retail.party.pb.Person.primary_currency:type_name -> google.retail.enums.currency.Currency
	24, // 33: google.retail.party.pb.Person.additional_dimensions:type_name -> google.retail.party.pb.Person.AdditionalDimensionsEntry
	11, // 34: google.retail.party.pb.Organization.id:type_name -> google.retail.party.pb.EffectiveParty
	40, // 35: google.retail.party.pb.Organization.business_classification:type_name -> google.retail.enums.party.BusinessClassification
	28, // 36: google.retail.party.pb.Organization.open_for_business:type_name -> google.protobuf.Timestamp
	28, // 37: google.retail.party.pb.Organization.closed_for_business:type_name -> google.protobuf.Timestamp
	28, // 38: google.retail.party.pb.Organization.incorporation_date:type_name -> google.protobuf.Timestamp
	28, // 39: google.retail.party.pb.Organization.fiscal_year_end_date:type_name -> google.protobuf.Timestamp
	41, // 40: google.retail.party.pb.Organization.primary_language:type_name -> google.retail.enums.lang.Language
	41, // 41: google.retail.party.pb.Organization.supported_languages:type_name -> google.retail.enums.lang.Language
	29, // 42: google.retail.party.pb.Organization.primary_currency:type_name -> google.retail.enums.currency.Currency
	36, // 43: google.retail.party.pb.Organization.religion_group:type_name -> google.retail.enums.party.ReligionGroup
	37, // 44: google.retail.party.pb.Organization.religion:type_name -> google.retail.enums.party.Religion
	25, // 45: google.retail.party.pb.Organization.additional_dimensions:type_name -> google.retail.party.pb.Organization.AdditionalDimensionsEntry
	11, // 46: google.retail.party.pb.OrganizationDUNSInformation.id:type_name -> google.retail.party.pb.EffectiveParty
	11, // 47: google.retail.party.pb.OrganizationBankruptcy.id:type_name -> google.retail.party.pb.EffectiveParty
	28, // 48: google.retail.party.pb.OrganizationBankruptcy.date:type_name -> google.protobuf.Timestamp
	28, // 49: google.retail.party.pb.OrganizationBankruptcy.emergence_date:type_name -> google.protobuf.Timestamp
	42, // 50: google.retail.party.pb.OrganizationBankruptcy.bankruptcy:type_name -> google.retail.enums.party.Bankruptcy
	11, // 51: google.retail.party.pb.Community.id:type_name -> google.retail.party.pb.EffectiveParty
	29, // 52: google.retail.party.pb.Community.primary_currency:type_name -> google.retail.enums.currency.Currency
	26, // 53: google.retail.party.pb.Community.additional_dimensions:type_name -> google.retail.party.pb.Community.AdditionalDimensionsEntry
	54, // [54:54] is the sub-list for method output_type
	54, // [54:54] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() { file_api_party_model_proto_init() }
func file_api_party_model_proto_init() {
	if File_api_party_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_party_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_party_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_party_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Party); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_party_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyRegistrationState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_party_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_party_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyIdentityDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_party_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyIdentification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_party_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyRoleAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_party_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationalParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_party_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffectiveParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_party_model_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Household); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_party_model_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Person); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_party_model_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_party_model_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationDUNSInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_party_model_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationBankruptcy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_party_model_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Community); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_party_model_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyTemplate_Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_party_model_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_party_model_proto_goTypes,
		DependencyIndexes: file_api_party_model_proto_depIdxs,
		EnumInfos:         file_api_party_model_proto_enumTypes,
		MessageInfos:      file_api_party_model_proto_msgTypes,
	}.Build()
	File_api_party_model_proto = out.File
	file_api_party_model_proto_rawDesc = nil
	file_api_party_model_proto_goTypes = nil
	file_api_party_model_proto_depIdxs = nil
}
