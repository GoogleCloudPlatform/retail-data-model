// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.10
// source: api/merchandise/model.proto

package pb

import (
	_ "github.com/GoogleCloudPlatform/protoc-gen-bq-schema/protos"
	pb "github.com/GoogleCloudPlatform/retail-data-model/common/pb"
	pb1 "github.com/GoogleCloudPlatform/retail-data-model/enterprise/pb"
	enums "github.com/GoogleCloudPlatform/retail-data-model/enums"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Supplier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                *pb.VersionID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	GeneralLedgerCode string        `protobuf:"bytes,2,opt,name=general_ledger_code,json=generalLedgerCode,proto3" json:"general_ledger_code,omitempty"`
}

func (x *Supplier) Reset() {
	*x = Supplier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_merchandise_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Supplier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Supplier) ProtoMessage() {}

func (x *Supplier) ProtoReflect() protoreflect.Message {
	mi := &file_api_merchandise_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Supplier.ProtoReflect.Descriptor instead.
func (*Supplier) Descriptor() ([]byte, []int) {
	return file_api_merchandise_model_proto_rawDescGZIP(), []int{0}
}

func (x *Supplier) GetId() *pb.VersionID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Supplier) GetGeneralLedgerCode() string {
	if x != nil {
		return x.GeneralLedgerCode
	}
	return ""
}

type ProductHeaderAttributeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryTemplateAttributeRuleId string `protobuf:"bytes,1,opt,name=category_template_attribute_rule_id,proto3" json:"category_template_attribute_rule_id,omitempty"`
	// Types that are assignable to Value:
	//
	//	*ProductHeaderAttributeValue_NumberValue
	//	*ProductHeaderAttributeValue_StringValue
	Value isProductHeaderAttributeValue_Value `protobuf_oneof:"value"`
}

func (x *ProductHeaderAttributeValue) Reset() {
	*x = ProductHeaderAttributeValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_merchandise_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductHeaderAttributeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductHeaderAttributeValue) ProtoMessage() {}

func (x *ProductHeaderAttributeValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_merchandise_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductHeaderAttributeValue.ProtoReflect.Descriptor instead.
func (*ProductHeaderAttributeValue) Descriptor() ([]byte, []int) {
	return file_api_merchandise_model_proto_rawDescGZIP(), []int{1}
}

func (x *ProductHeaderAttributeValue) GetCategoryTemplateAttributeRuleId() string {
	if x != nil {
		return x.CategoryTemplateAttributeRuleId
	}
	return ""
}

func (m *ProductHeaderAttributeValue) GetValue() isProductHeaderAttributeValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ProductHeaderAttributeValue) GetNumberValue() float64 {
	if x, ok := x.GetValue().(*ProductHeaderAttributeValue_NumberValue); ok {
		return x.NumberValue
	}
	return 0
}

func (x *ProductHeaderAttributeValue) GetStringValue() string {
	if x, ok := x.GetValue().(*ProductHeaderAttributeValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

type isProductHeaderAttributeValue_Value interface {
	isProductHeaderAttributeValue_Value()
}

type ProductHeaderAttributeValue_NumberValue struct {
	NumberValue float64 `protobuf:"fixed64,2,opt,name=number_value,proto3,oneof"`
}

type ProductHeaderAttributeValue_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=string_value,proto3,oneof"`
}

func (*ProductHeaderAttributeValue_NumberValue) isProductHeaderAttributeValue_Value() {}

func (*ProductHeaderAttributeValue_StringValue) isProductHeaderAttributeValue_Value() {}

type ProductHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locale           enums.Locale                   `protobuf:"varint,1,opt,name=locale,proto3,enum=google.retail.enums.locale.Locale" json:"locale,omitempty"`
	Brand            string                         `protobuf:"bytes,2,opt,name=brand,proto3" json:"brand,omitempty"`
	Name             string                         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ShortDescription string                         `protobuf:"bytes,4,opt,name=short_description,proto3" json:"short_description,omitempty"`
	LongDescription  string                         `protobuf:"bytes,5,opt,name=long_description,proto3" json:"long_description,omitempty"`
	SearchTerms      []string                       `protobuf:"bytes,6,rep,name=search_terms,proto3" json:"search_terms,omitempty"`
	AttributeValues  []*ProductHeaderAttributeValue `protobuf:"bytes,8,rep,name=attribute_values,proto3" json:"attribute_values,omitempty"`
	Images           []*pb.Image                    `protobuf:"bytes,7,rep,name=images,proto3" json:"images,omitempty"`
}

func (x *ProductHeader) Reset() {
	*x = ProductHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_merchandise_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductHeader) ProtoMessage() {}

func (x *ProductHeader) ProtoReflect() protoreflect.Message {
	mi := &file_api_merchandise_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductHeader.ProtoReflect.Descriptor instead.
func (*ProductHeader) Descriptor() ([]byte, []int) {
	return file_api_merchandise_model_proto_rawDescGZIP(), []int{2}
}

func (x *ProductHeader) GetLocale() enums.Locale {
	if x != nil {
		return x.Locale
	}
	return enums.Locale(0)
}

func (x *ProductHeader) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *ProductHeader) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductHeader) GetShortDescription() string {
	if x != nil {
		return x.ShortDescription
	}
	return ""
}

func (x *ProductHeader) GetLongDescription() string {
	if x != nil {
		return x.LongDescription
	}
	return ""
}

func (x *ProductHeader) GetSearchTerms() []string {
	if x != nil {
		return x.SearchTerms
	}
	return nil
}

func (x *ProductHeader) GetAttributeValues() []*ProductHeaderAttributeValue {
	if x != nil {
		return x.AttributeValues
	}
	return nil
}

func (x *ProductHeader) GetImages() []*pb.Image {
	if x != nil {
		return x.Images
	}
	return nil
}

type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                *pb.VersionID      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BusinessKeys      []*pb.BusinessKey  `protobuf:"bytes,2,rep,name=business_keys,proto3" json:"business_keys,omitempty"`
	ProductTemplateId string             `protobuf:"bytes,11,opt,name=product_template_id,proto3" json:"product_template_id,omitempty"`
	Headers           []*ProductHeader   `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty"`
	BasePrice         *pb.Currency       `protobuf:"bytes,5,opt,name=base_price,proto3" json:"base_price,omitempty"`
	TaxCode           *pb1.TaxCode       `protobuf:"bytes,6,opt,name=tax_code,proto3" json:"tax_code,omitempty"`
	Categories        []*Category        `protobuf:"bytes,7,rep,name=categories,proto3" json:"categories,omitempty"`
	Rating            float64            `protobuf:"fixed64,8,opt,name=rating,proto3" json:"rating,omitempty"`
	Measurements      []*pb.NamedMeasure `protobuf:"bytes,9,rep,name=measurements,proto3" json:"measurements,omitempty"`
	Variations        []*pb.VersionID    `protobuf:"bytes,10,rep,name=variations,proto3" json:"variations,omitempty"`
	Substitutions     []*pb.VersionID    `protobuf:"bytes,20,rep,name=substitutions,proto3" json:"substitutions,omitempty"`
	RelatedProducts   []*pb.VersionID    `protobuf:"bytes,30,rep,name=related_products,proto3" json:"related_products,omitempty"`
	Suppliers         []*Supplier        `protobuf:"bytes,50,rep,name=suppliers,proto3" json:"suppliers,omitempty"`
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_merchandise_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_api_merchandise_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_api_merchandise_model_proto_rawDescGZIP(), []int{3}
}

func (x *Product) GetId() *pb.VersionID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Product) GetBusinessKeys() []*pb.BusinessKey {
	if x != nil {
		return x.BusinessKeys
	}
	return nil
}

func (x *Product) GetProductTemplateId() string {
	if x != nil {
		return x.ProductTemplateId
	}
	return ""
}

func (x *Product) GetHeaders() []*ProductHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Product) GetBasePrice() *pb.Currency {
	if x != nil {
		return x.BasePrice
	}
	return nil
}

func (x *Product) GetTaxCode() *pb1.TaxCode {
	if x != nil {
		return x.TaxCode
	}
	return nil
}

func (x *Product) GetCategories() []*Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *Product) GetRating() float64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *Product) GetMeasurements() []*pb.NamedMeasure {
	if x != nil {
		return x.Measurements
	}
	return nil
}

func (x *Product) GetVariations() []*pb.VersionID {
	if x != nil {
		return x.Variations
	}
	return nil
}

func (x *Product) GetSubstitutions() []*pb.VersionID {
	if x != nil {
		return x.Substitutions
	}
	return nil
}

func (x *Product) GetRelatedProducts() []*pb.VersionID {
	if x != nil {
		return x.RelatedProducts
	}
	return nil
}

func (x *Product) GetSuppliers() []*Supplier {
	if x != nil {
		return x.Suppliers
	}
	return nil
}

var File_api_merchandise_model_proto protoreflect.FileDescriptor

var file_api_merchandise_model_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x64, 0x69, 0x73,
	0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x64, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x1a, 0x16, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x64, 0x69, 0x73, 0x65, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x16, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x71, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6e, 0x0a, 0x08, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x1b,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x50, 0x0a, 0x23, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x23, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x24, 0x0a,
	0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x92, 0x03, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x6f, 0x6e, 0x67,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x65, 0x0a, 0x10, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x64, 0x69, 0x73, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x36, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0xe8, 0x06, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x12, 0x32, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x4b, 0x65, 0x79, 0x52, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x64, 0x69,
	0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x0a,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x40, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x54, 0x61, 0x78, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x46, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x64, 0x69, 0x73,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x49, 0x0a, 0x0c, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x0c,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0a,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x52, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x48, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x62, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x0d, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x10, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x1e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x09, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x73, 0x18, 0x32, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x64, 0x69, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x09, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x73,
	0x3a, 0x10, 0xea, 0x3f, 0x0d, 0x0a, 0x0b, 0x74, 0x62, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x42, 0x65, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x64,
	0x69, 0x73, 0x65, 0x2e, 0x70, 0x62, 0x50, 0x01, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2d,
	0x64, 0x61, 0x74, 0x61, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x64, 0x69, 0x73, 0x65, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_api_merchandise_model_proto_rawDescOnce sync.Once
	file_api_merchandise_model_proto_rawDescData = file_api_merchandise_model_proto_rawDesc
)

func file_api_merchandise_model_proto_rawDescGZIP() []byte {
	file_api_merchandise_model_proto_rawDescOnce.Do(func() {
		file_api_merchandise_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_merchandise_model_proto_rawDescData)
	})
	return file_api_merchandise_model_proto_rawDescData
}

var file_api_merchandise_model_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_api_merchandise_model_proto_goTypes = []interface{}{
	(*Supplier)(nil),                    // 0: google.retail.merchandise.pb.Supplier
	(*ProductHeaderAttributeValue)(nil), // 1: google.retail.merchandise.pb.ProductHeaderAttributeValue
	(*ProductHeader)(nil),               // 2: google.retail.merchandise.pb.ProductHeader
	(*Product)(nil),                     // 3: google.retail.merchandise.pb.Product
	(*pb.VersionID)(nil),                // 4: google.retail.common.pb.VersionID
	(enums.Locale)(0),                   // 5: google.retail.enums.locale.Locale
	(*pb.Image)(nil),                    // 6: google.retail.common.pb.Image
	(*pb.BusinessKey)(nil),              // 7: google.retail.common.pb.BusinessKey
	(*pb.Currency)(nil),                 // 8: google.retail.common.pb.Currency
	(*pb1.TaxCode)(nil),                 // 9: google.retail.enterprise.pb.TaxCode
	(*Category)(nil),                    // 10: google.retail.merchandise.pb.Category
	(*pb.NamedMeasure)(nil),             // 11: google.retail.common.pb.NamedMeasure
}
var file_api_merchandise_model_proto_depIdxs = []int32{
	4,  // 0: google.retail.merchandise.pb.Supplier.id:type_name -> google.retail.common.pb.VersionID
	5,  // 1: google.retail.merchandise.pb.ProductHeader.locale:type_name -> google.retail.enums.locale.Locale
	1,  // 2: google.retail.merchandise.pb.ProductHeader.attribute_values:type_name -> google.retail.merchandise.pb.ProductHeaderAttributeValue
	6,  // 3: google.retail.merchandise.pb.ProductHeader.images:type_name -> google.retail.common.pb.Image
	4,  // 4: google.retail.merchandise.pb.Product.id:type_name -> google.retail.common.pb.VersionID
	7,  // 5: google.retail.merchandise.pb.Product.business_keys:type_name -> google.retail.common.pb.BusinessKey
	2,  // 6: google.retail.merchandise.pb.Product.headers:type_name -> google.retail.merchandise.pb.ProductHeader
	8,  // 7: google.retail.merchandise.pb.Product.base_price:type_name -> google.retail.common.pb.Currency
	9,  // 8: google.retail.merchandise.pb.Product.tax_code:type_name -> google.retail.enterprise.pb.TaxCode
	10, // 9: google.retail.merchandise.pb.Product.categories:type_name -> google.retail.merchandise.pb.Category
	11, // 10: google.retail.merchandise.pb.Product.measurements:type_name -> google.retail.common.pb.NamedMeasure
	4,  // 11: google.retail.merchandise.pb.Product.variations:type_name -> google.retail.common.pb.VersionID
	4,  // 12: google.retail.merchandise.pb.Product.substitutions:type_name -> google.retail.common.pb.VersionID
	4,  // 13: google.retail.merchandise.pb.Product.related_products:type_name -> google.retail.common.pb.VersionID
	0,  // 14: google.retail.merchandise.pb.Product.suppliers:type_name -> google.retail.merchandise.pb.Supplier
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_api_merchandise_model_proto_init() }
func file_api_merchandise_model_proto_init() {
	if File_api_merchandise_model_proto != nil {
		return
	}
	file_api_merchandise_category_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_merchandise_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Supplier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_merchandise_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductHeaderAttributeValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_merchandise_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_merchandise_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_merchandise_model_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ProductHeaderAttributeValue_NumberValue)(nil),
		(*ProductHeaderAttributeValue_StringValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_merchandise_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_merchandise_model_proto_goTypes,
		DependencyIndexes: file_api_merchandise_model_proto_depIdxs,
		MessageInfos:      file_api_merchandise_model_proto_msgTypes,
	}.Build()
	File_api_merchandise_model_proto = out.File
	file_api_merchandise_model_proto_rawDesc = nil
	file_api_merchandise_model_proto_goTypes = nil
	file_api_merchandise_model_proto_depIdxs = nil
}
