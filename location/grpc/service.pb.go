// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.10
// source: api/location/service.proto

package grpc

import (
	context "context"
	pb1 "github.com/GoogleCloudPlatform/retail-data-model/common/pb"
	pb "github.com/GoogleCloudPlatform/retail-data-model/location/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_api_location_service_proto protoreflect.FileDescriptor

var file_api_location_service_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18,
	0x61, 0x70, 0x69, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xe9, 0x04, 0x0a, 0x05, 0x53, 0x69, 0x74,
	0x65, 0x73, 0x12, 0x60, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x1a, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x22, 0x14,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x3a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x22, 0x06, 0x2f, 0x73,
	0x69, 0x74, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x1a,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x74, 0x65,
	0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x3a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x1a, 0x06,
	0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x74,
	0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0e, 0x3a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x2a, 0x06, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x12,
	0x74, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x29, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15,
	0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x12, 0x6c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x69, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x62, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x22, 0x13,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x5f, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x69, 0x74, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x69,
	0x74, 0x65, 0x22, 0x0e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x2f, 0x73, 0x69, 0x74,
	0x65, 0x73, 0x30, 0x01, 0x32, 0xa8, 0x05, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x70, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x0a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x70, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16,
	0x3a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0a, 0x2f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x63, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a,
	0x0a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x7c, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62,
	0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19,
	0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f,
	0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x12, 0x70, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x62, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x62, 0x0a, 0x0d, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x62,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0c, 0x12, 0x0a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x30, 0x01, 0x32,
	0xbc, 0x06, 0x0a, 0x10, 0x47, 0x65, 0x6f, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6f, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x2a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6f, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a,
	0x11, 0x67, 0x65, 0x6f, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x22, 0x13, 0x2f, 0x67, 0x65, 0x6f, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x6f, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x2a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6f, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x28, 0x3a, 0x11, 0x67, 0x65, 0x6f, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x13, 0x2f, 0x67, 0x65, 0x6f, 0x5f, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x7c, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x6f, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28,
	0x3a, 0x11, 0x67, 0x65, 0x6f, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2a, 0x13, 0x2f, 0x67, 0x65, 0x6f, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x42, 0x79, 0x49, 0x44, 0x12, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6f, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x2a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x67, 0x65, 0x6f, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x12, 0x80, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x62, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6f, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a,
	0x12, 0x18, 0x2f, 0x67, 0x65, 0x6f, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x72, 0x0a, 0x0d, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x6f, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22,
	0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x67, 0x65, 0x6f, 0x5f, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x30, 0x01, 0x32, 0xd9,
	0x06, 0x0a, 0x0b, 0x47, 0x65, 0x6f, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x7a,
	0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6f, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x1a,
	0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6f, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x0b,
	0x67, 0x65, 0x6f, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x0d, 0x2f, 0x67, 0x65,
	0x6f, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x7a, 0x0a, 0x06, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x6f, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x25, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6f, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x0b, 0x67, 0x65, 0x6f, 0x5f,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x2f, 0x67, 0x65, 0x6f, 0x5f, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x6b, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6f,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x0b, 0x67, 0x65, 0x6f, 0x5f, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x2a, 0x0d, 0x2f, 0x67, 0x65, 0x6f, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12,
	0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6f, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x67, 0x65, 0x6f, 0x5f,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x12, 0x75, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x62, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6f, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x67, 0x65, 0x6f,
	0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x67,
	0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6f, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x15,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x67, 0x65, 0x6f, 0x5f, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x30, 0x01, 0x12, 0x80, 0x01, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64,
	0x42, 0x79, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0x25,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6f, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x0d, 0x2f, 0x67, 0x65, 0x6f, 0x5f,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x30, 0x01, 0x42, 0x63, 0x0a, 0x1f, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x50, 0x01, 0x5a,
	0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f,
	0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_api_location_service_proto_goTypes = []interface{}{
	(*pb.Site)(nil),               // 0: google.retail.location.pb.Site
	(*pb1.VersionIDRequest)(nil),  // 1: google.retail.common.pb.VersionIDRequest
	(*pb1.IDRequest)(nil),         // 2: google.retail.common.pb.IDRequest
	(*emptypb.Empty)(nil),         // 3: google.protobuf.Empty
	(*pb.Location)(nil),           // 4: google.retail.location.pb.Location
	(*pb.GeoSegmentGroup)(nil),    // 5: google.retail.location.pb.GeoSegmentGroup
	(*pb.GeoSegment)(nil),         // 6: google.retail.location.pb.GeoSegment
	(*fieldmaskpb.FieldMask)(nil), // 7: google.protobuf.FieldMask
}
var file_api_location_service_proto_depIdxs = []int32{
	0,  // 0: google.retail.location.grpc.Sites.Create:input_type -> google.retail.location.pb.Site
	0,  // 1: google.retail.location.grpc.Sites.Update:input_type -> google.retail.location.pb.Site
	0,  // 2: google.retail.location.grpc.Sites.Delete:input_type -> google.retail.location.pb.Site
	1,  // 3: google.retail.location.grpc.Sites.GetById:input_type -> google.retail.common.pb.VersionIDRequest
	2,  // 4: google.retail.location.grpc.Sites.GetEffectiveSite:input_type -> google.retail.common.pb.IDRequest
	3,  // 5: google.retail.location.grpc.Sites.ListEffectiveSites:input_type -> google.protobuf.Empty
	4,  // 6: google.retail.location.grpc.Locations.Create:input_type -> google.retail.location.pb.Location
	4,  // 7: google.retail.location.grpc.Locations.Update:input_type -> google.retail.location.pb.Location
	4,  // 8: google.retail.location.grpc.Locations.Delete:input_type -> google.retail.location.pb.Location
	1,  // 9: google.retail.location.grpc.Locations.GetById:input_type -> google.retail.common.pb.VersionIDRequest
	2,  // 10: google.retail.location.grpc.Locations.GetEffective:input_type -> google.retail.common.pb.IDRequest
	3,  // 11: google.retail.location.grpc.Locations.ListEffective:input_type -> google.protobuf.Empty
	5,  // 12: google.retail.location.grpc.GeoSegmentGroups.Create:input_type -> google.retail.location.pb.GeoSegmentGroup
	5,  // 13: google.retail.location.grpc.GeoSegmentGroups.Update:input_type -> google.retail.location.pb.GeoSegmentGroup
	5,  // 14: google.retail.location.grpc.GeoSegmentGroups.Delete:input_type -> google.retail.location.pb.GeoSegmentGroup
	1,  // 15: google.retail.location.grpc.GeoSegmentGroups.GetByID:input_type -> google.retail.common.pb.VersionIDRequest
	2,  // 16: google.retail.location.grpc.GeoSegmentGroups.GetEffective:input_type -> google.retail.common.pb.IDRequest
	3,  // 17: google.retail.location.grpc.GeoSegmentGroups.ListEffective:input_type -> google.protobuf.Empty
	6,  // 18: google.retail.location.grpc.GeoSegments.Create:input_type -> google.retail.location.pb.GeoSegment
	6,  // 19: google.retail.location.grpc.GeoSegments.Update:input_type -> google.retail.location.pb.GeoSegment
	6,  // 20: google.retail.location.grpc.GeoSegments.Delete:input_type -> google.retail.location.pb.GeoSegment
	1,  // 21: google.retail.location.grpc.GeoSegments.GetByID:input_type -> google.retail.common.pb.VersionIDRequest
	2,  // 22: google.retail.location.grpc.GeoSegments.GetEffective:input_type -> google.retail.common.pb.IDRequest
	3,  // 23: google.retail.location.grpc.GeoSegments.ListEffective:input_type -> google.protobuf.Empty
	7,  // 24: google.retail.location.grpc.GeoSegments.FindByAbbreviationPath:input_type -> google.protobuf.FieldMask
	0,  // 25: google.retail.location.grpc.Sites.Create:output_type -> google.retail.location.pb.Site
	0,  // 26: google.retail.location.grpc.Sites.Update:output_type -> google.retail.location.pb.Site
	3,  // 27: google.retail.location.grpc.Sites.Delete:output_type -> google.protobuf.Empty
	0,  // 28: google.retail.location.grpc.Sites.GetById:output_type -> google.retail.location.pb.Site
	0,  // 29: google.retail.location.grpc.Sites.GetEffectiveSite:output_type -> google.retail.location.pb.Site
	0,  // 30: google.retail.location.grpc.Sites.ListEffectiveSites:output_type -> google.retail.location.pb.Site
	4,  // 31: google.retail.location.grpc.Locations.Create:output_type -> google.retail.location.pb.Location
	4,  // 32: google.retail.location.grpc.Locations.Update:output_type -> google.retail.location.pb.Location
	3,  // 33: google.retail.location.grpc.Locations.Delete:output_type -> google.protobuf.Empty
	4,  // 34: google.retail.location.grpc.Locations.GetById:output_type -> google.retail.location.pb.Location
	4,  // 35: google.retail.location.grpc.Locations.GetEffective:output_type -> google.retail.location.pb.Location
	4,  // 36: google.retail.location.grpc.Locations.ListEffective:output_type -> google.retail.location.pb.Location
	5,  // 37: google.retail.location.grpc.GeoSegmentGroups.Create:output_type -> google.retail.location.pb.GeoSegmentGroup
	5,  // 38: google.retail.location.grpc.GeoSegmentGroups.Update:output_type -> google.retail.location.pb.GeoSegmentGroup
	3,  // 39: google.retail.location.grpc.GeoSegmentGroups.Delete:output_type -> google.protobuf.Empty
	5,  // 40: google.retail.location.grpc.GeoSegmentGroups.GetByID:output_type -> google.retail.location.pb.GeoSegmentGroup
	5,  // 41: google.retail.location.grpc.GeoSegmentGroups.GetEffective:output_type -> google.retail.location.pb.GeoSegmentGroup
	5,  // 42: google.retail.location.grpc.GeoSegmentGroups.ListEffective:output_type -> google.retail.location.pb.GeoSegmentGroup
	6,  // 43: google.retail.location.grpc.GeoSegments.Create:output_type -> google.retail.location.pb.GeoSegment
	6,  // 44: google.retail.location.grpc.GeoSegments.Update:output_type -> google.retail.location.pb.GeoSegment
	3,  // 45: google.retail.location.grpc.GeoSegments.Delete:output_type -> google.protobuf.Empty
	6,  // 46: google.retail.location.grpc.GeoSegments.GetByID:output_type -> google.retail.location.pb.GeoSegment
	6,  // 47: google.retail.location.grpc.GeoSegments.GetEffective:output_type -> google.retail.location.pb.GeoSegment
	6,  // 48: google.retail.location.grpc.GeoSegments.ListEffective:output_type -> google.retail.location.pb.GeoSegment
	6,  // 49: google.retail.location.grpc.GeoSegments.FindByAbbreviationPath:output_type -> google.retail.location.pb.GeoSegment
	25, // [25:50] is the sub-list for method output_type
	0,  // [0:25] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_api_location_service_proto_init() }
func file_api_location_service_proto_init() {
	if File_api_location_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_location_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_api_location_service_proto_goTypes,
		DependencyIndexes: file_api_location_service_proto_depIdxs,
	}.Build()
	File_api_location_service_proto = out.File
	file_api_location_service_proto_rawDesc = nil
	file_api_location_service_proto_goTypes = nil
	file_api_location_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SitesClient is the client API for Sites service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SitesClient interface {
	Create(ctx context.Context, in *pb.Site, opts ...grpc.CallOption) (*pb.Site, error)
	Update(ctx context.Context, in *pb.Site, opts ...grpc.CallOption) (*pb.Site, error)
	Delete(ctx context.Context, in *pb.Site, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetById(ctx context.Context, in *pb1.VersionIDRequest, opts ...grpc.CallOption) (*pb.Site, error)
	GetEffectiveSite(ctx context.Context, in *pb1.IDRequest, opts ...grpc.CallOption) (*pb.Site, error)
	ListEffectiveSites(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Sites_ListEffectiveSitesClient, error)
}

type sitesClient struct {
	cc grpc.ClientConnInterface
}

func NewSitesClient(cc grpc.ClientConnInterface) SitesClient {
	return &sitesClient{cc}
}

func (c *sitesClient) Create(ctx context.Context, in *pb.Site, opts ...grpc.CallOption) (*pb.Site, error) {
	out := new(pb.Site)
	err := c.cc.Invoke(ctx, "/google.retail.location.grpc.Sites/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesClient) Update(ctx context.Context, in *pb.Site, opts ...grpc.CallOption) (*pb.Site, error) {
	out := new(pb.Site)
	err := c.cc.Invoke(ctx, "/google.retail.location.grpc.Sites/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesClient) Delete(ctx context.Context, in *pb.Site, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/google.retail.location.grpc.Sites/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesClient) GetById(ctx context.Context, in *pb1.VersionIDRequest, opts ...grpc.CallOption) (*pb.Site, error) {
	out := new(pb.Site)
	err := c.cc.Invoke(ctx, "/google.retail.location.grpc.Sites/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesClient) GetEffectiveSite(ctx context.Context, in *pb1.IDRequest, opts ...grpc.CallOption) (*pb.Site, error) {
	out := new(pb.Site)
	err := c.cc.Invoke(ctx, "/google.retail.location.grpc.Sites/GetEffectiveSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesClient) ListEffectiveSites(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Sites_ListEffectiveSitesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Sites_serviceDesc.Streams[0], "/google.retail.location.grpc.Sites/ListEffectiveSites", opts...)
	if err != nil {
		return nil, err
	}
	x := &sitesListEffectiveSitesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sites_ListEffectiveSitesClient interface {
	Recv() (*pb.Site, error)
	grpc.ClientStream
}

type sitesListEffectiveSitesClient struct {
	grpc.ClientStream
}

func (x *sitesListEffectiveSitesClient) Recv() (*pb.Site, error) {
	m := new(pb.Site)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SitesServer is the server API for Sites service.
type SitesServer interface {
	Create(context.Context, *pb.Site) (*pb.Site, error)
	Update(context.Context, *pb.Site) (*pb.Site, error)
	Delete(context.Context, *pb.Site) (*emptypb.Empty, error)
	GetById(context.Context, *pb1.VersionIDRequest) (*pb.Site, error)
	GetEffectiveSite(context.Context, *pb1.IDRequest) (*pb.Site, error)
	ListEffectiveSites(*emptypb.Empty, Sites_ListEffectiveSitesServer) error
}

// UnimplementedSitesServer can be embedded to have forward compatible implementations.
type UnimplementedSitesServer struct {
}

func (*UnimplementedSitesServer) Create(context.Context, *pb.Site) (*pb.Site, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedSitesServer) Update(context.Context, *pb.Site) (*pb.Site, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedSitesServer) Delete(context.Context, *pb.Site) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedSitesServer) GetById(context.Context, *pb1.VersionIDRequest) (*pb.Site, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (*UnimplementedSitesServer) GetEffectiveSite(context.Context, *pb1.IDRequest) (*pb.Site, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEffectiveSite not implemented")
}
func (*UnimplementedSitesServer) ListEffectiveSites(*emptypb.Empty, Sites_ListEffectiveSitesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListEffectiveSites not implemented")
}

func RegisterSitesServer(s *grpc.Server, srv SitesServer) {
	s.RegisterService(&_Sites_serviceDesc, srv)
}

func _Sites_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Site)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.location.grpc.Sites/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServer).Create(ctx, req.(*pb.Site))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sites_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Site)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.location.grpc.Sites/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServer).Update(ctx, req.(*pb.Site))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sites_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Site)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.location.grpc.Sites/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServer).Delete(ctx, req.(*pb.Site))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sites_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb1.VersionIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.location.grpc.Sites/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServer).GetById(ctx, req.(*pb1.VersionIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sites_GetEffectiveSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb1.IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServer).GetEffectiveSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.location.grpc.Sites/GetEffectiveSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServer).GetEffectiveSite(ctx, req.(*pb1.IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sites_ListEffectiveSites_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SitesServer).ListEffectiveSites(m, &sitesListEffectiveSitesServer{stream})
}

type Sites_ListEffectiveSitesServer interface {
	Send(*pb.Site) error
	grpc.ServerStream
}

type sitesListEffectiveSitesServer struct {
	grpc.ServerStream
}

func (x *sitesListEffectiveSitesServer) Send(m *pb.Site) error {
	return x.ServerStream.SendMsg(m)
}

var _Sites_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.retail.location.grpc.Sites",
	HandlerType: (*SitesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Sites_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Sites_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Sites_Delete_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _Sites_GetById_Handler,
		},
		{
			MethodName: "GetEffectiveSite",
			Handler:    _Sites_GetEffectiveSite_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListEffectiveSites",
			Handler:       _Sites_ListEffectiveSites_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/location/service.proto",
}

// LocationsClient is the client API for Locations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LocationsClient interface {
	Create(ctx context.Context, in *pb.Location, opts ...grpc.CallOption) (*pb.Location, error)
	Update(ctx context.Context, in *pb.Location, opts ...grpc.CallOption) (*pb.Location, error)
	Delete(ctx context.Context, in *pb.Location, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetById(ctx context.Context, in *pb1.VersionIDRequest, opts ...grpc.CallOption) (*pb.Location, error)
	GetEffective(ctx context.Context, in *pb1.IDRequest, opts ...grpc.CallOption) (*pb.Location, error)
	ListEffective(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Locations_ListEffectiveClient, error)
}

type locationsClient struct {
	cc grpc.ClientConnInterface
}

func NewLocationsClient(cc grpc.ClientConnInterface) LocationsClient {
	return &locationsClient{cc}
}

func (c *locationsClient) Create(ctx context.Context, in *pb.Location, opts ...grpc.CallOption) (*pb.Location, error) {
	out := new(pb.Location)
	err := c.cc.Invoke(ctx, "/google.retail.location.grpc.Locations/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationsClient) Update(ctx context.Context, in *pb.Location, opts ...grpc.CallOption) (*pb.Location, error) {
	out := new(pb.Location)
	err := c.cc.Invoke(ctx, "/google.retail.location.grpc.Locations/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationsClient) Delete(ctx context.Context, in *pb.Location, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/google.retail.location.grpc.Locations/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationsClient) GetById(ctx context.Context, in *pb1.VersionIDRequest, opts ...grpc.CallOption) (*pb.Location, error) {
	out := new(pb.Location)
	err := c.cc.Invoke(ctx, "/google.retail.location.grpc.Locations/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationsClient) GetEffective(ctx context.Context, in *pb1.IDRequest, opts ...grpc.CallOption) (*pb.Location, error) {
	out := new(pb.Location)
	err := c.cc.Invoke(ctx, "/google.retail.location.grpc.Locations/GetEffective", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationsClient) ListEffective(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Locations_ListEffectiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Locations_serviceDesc.Streams[0], "/google.retail.location.grpc.Locations/ListEffective", opts...)
	if err != nil {
		return nil, err
	}
	x := &locationsListEffectiveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Locations_ListEffectiveClient interface {
	Recv() (*pb.Location, error)
	grpc.ClientStream
}

type locationsListEffectiveClient struct {
	grpc.ClientStream
}

func (x *locationsListEffectiveClient) Recv() (*pb.Location, error) {
	m := new(pb.Location)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LocationsServer is the server API for Locations service.
type LocationsServer interface {
	Create(context.Context, *pb.Location) (*pb.Location, error)
	Update(context.Context, *pb.Location) (*pb.Location, error)
	Delete(context.Context, *pb.Location) (*emptypb.Empty, error)
	GetById(context.Context, *pb1.VersionIDRequest) (*pb.Location, error)
	GetEffective(context.Context, *pb1.IDRequest) (*pb.Location, error)
	ListEffective(*emptypb.Empty, Locations_ListEffectiveServer) error
}

// UnimplementedLocationsServer can be embedded to have forward compatible implementations.
type UnimplementedLocationsServer struct {
}

func (*UnimplementedLocationsServer) Create(context.Context, *pb.Location) (*pb.Location, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedLocationsServer) Update(context.Context, *pb.Location) (*pb.Location, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedLocationsServer) Delete(context.Context, *pb.Location) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedLocationsServer) GetById(context.Context, *pb1.VersionIDRequest) (*pb.Location, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (*UnimplementedLocationsServer) GetEffective(context.Context, *pb1.IDRequest) (*pb.Location, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEffective not implemented")
}
func (*UnimplementedLocationsServer) ListEffective(*emptypb.Empty, Locations_ListEffectiveServer) error {
	return status.Errorf(codes.Unimplemented, "method ListEffective not implemented")
}

func RegisterLocationsServer(s *grpc.Server, srv LocationsServer) {
	s.RegisterService(&_Locations_serviceDesc, srv)
}

func _Locations_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.location.grpc.Locations/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationsServer).Create(ctx, req.(*pb.Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _Locations_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.location.grpc.Locations/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationsServer).Update(ctx, req.(*pb.Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _Locations_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.location.grpc.Locations/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationsServer).Delete(ctx, req.(*pb.Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _Locations_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb1.VersionIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationsServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.location.grpc.Locations/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationsServer).GetById(ctx, req.(*pb1.VersionIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Locations_GetEffective_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb1.IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationsServer).GetEffective(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.location.grpc.Locations/GetEffective",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationsServer).GetEffective(ctx, req.(*pb1.IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Locations_ListEffective_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LocationsServer).ListEffective(m, &locationsListEffectiveServer{stream})
}

type Locations_ListEffectiveServer interface {
	Send(*pb.Location) error
	grpc.ServerStream
}

type locationsListEffectiveServer struct {
	grpc.ServerStream
}

func (x *locationsListEffectiveServer) Send(m *pb.Location) error {
	return x.ServerStream.SendMsg(m)
}

var _Locations_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.retail.location.grpc.Locations",
	HandlerType: (*LocationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Locations_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Locations_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Locations_Delete_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _Locations_GetById_Handler,
		},
		{
			MethodName: "GetEffective",
			Handler:    _Locations_GetEffective_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListEffective",
			Handler:       _Locations_ListEffective_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/location/service.proto",
}

// GeoSegmentGroupsClient is the client API for GeoSegmentGroups service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GeoSegmentGroupsClient interface {
	Create(ctx context.Context, in *pb.GeoSegmentGroup, opts ...grpc.CallOption) (*pb.GeoSegmentGroup, error)
	Update(ctx context.Context, in *pb.GeoSegmentGroup, opts ...grpc.CallOption) (*pb.GeoSegmentGroup, error)
	Delete(ctx context.Context, in *pb.GeoSegmentGroup, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetByID(ctx context.Context, in *pb1.VersionIDRequest, opts ...grpc.CallOption) (*pb.GeoSegmentGroup, error)
	GetEffective(ctx context.Context, in *pb1.IDRequest, opts ...grpc.CallOption) (*pb.GeoSegmentGroup, error)
	ListEffective(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (GeoSegmentGroups_ListEffectiveClient, error)
}

type geoSegmentGroupsClient struct {
	cc grpc.ClientConnInterface
}

func NewGeoSegmentGroupsClient(cc grpc.ClientConnInterface) GeoSegmentGroupsClient {
	return &geoSegmentGroupsClient{cc}
}

func (c *geoSegmentGroupsClient) Create(ctx context.Context, in *pb.GeoSegmentGroup, opts ...grpc.CallOption) (*pb.GeoSegmentGroup, error) {
	out := new(pb.GeoSegmentGroup)
	err := c.cc.Invoke(ctx, "/google.retail.location.grpc.GeoSegmentGroups/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoSegmentGroupsClient) Update(ctx context.Context, in *pb.GeoSegmentGroup, opts ...grpc.CallOption) (*pb.GeoSegmentGroup, error) {
	out := new(pb.GeoSegmentGroup)
	err := c.cc.Invoke(ctx, "/google.retail.location.grpc.GeoSegmentGroups/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoSegmentGroupsClient) Delete(ctx context.Context, in *pb.GeoSegmentGroup, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/google.retail.location.grpc.GeoSegmentGroups/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoSegmentGroupsClient) GetByID(ctx context.Context, in *pb1.VersionIDRequest, opts ...grpc.CallOption) (*pb.GeoSegmentGroup, error) {
	out := new(pb.GeoSegmentGroup)
	err := c.cc.Invoke(ctx, "/google.retail.location.grpc.GeoSegmentGroups/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoSegmentGroupsClient) GetEffective(ctx context.Context, in *pb1.IDRequest, opts ...grpc.CallOption) (*pb.GeoSegmentGroup, error) {
	out := new(pb.GeoSegmentGroup)
	err := c.cc.Invoke(ctx, "/google.retail.location.grpc.GeoSegmentGroups/GetEffective", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoSegmentGroupsClient) ListEffective(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (GeoSegmentGroups_ListEffectiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GeoSegmentGroups_serviceDesc.Streams[0], "/google.retail.location.grpc.GeoSegmentGroups/ListEffective", opts...)
	if err != nil {
		return nil, err
	}
	x := &geoSegmentGroupsListEffectiveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GeoSegmentGroups_ListEffectiveClient interface {
	Recv() (*pb.GeoSegmentGroup, error)
	grpc.ClientStream
}

type geoSegmentGroupsListEffectiveClient struct {
	grpc.ClientStream
}

func (x *geoSegmentGroupsListEffectiveClient) Recv() (*pb.GeoSegmentGroup, error) {
	m := new(pb.GeoSegmentGroup)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GeoSegmentGroupsServer is the server API for GeoSegmentGroups service.
type GeoSegmentGroupsServer interface {
	Create(context.Context, *pb.GeoSegmentGroup) (*pb.GeoSegmentGroup, error)
	Update(context.Context, *pb.GeoSegmentGroup) (*pb.GeoSegmentGroup, error)
	Delete(context.Context, *pb.GeoSegmentGroup) (*emptypb.Empty, error)
	GetByID(context.Context, *pb1.VersionIDRequest) (*pb.GeoSegmentGroup, error)
	GetEffective(context.Context, *pb1.IDRequest) (*pb.GeoSegmentGroup, error)
	ListEffective(*emptypb.Empty, GeoSegmentGroups_ListEffectiveServer) error
}

// UnimplementedGeoSegmentGroupsServer can be embedded to have forward compatible implementations.
type UnimplementedGeoSegmentGroupsServer struct {
}

func (*UnimplementedGeoSegmentGroupsServer) Create(context.Context, *pb.GeoSegmentGroup) (*pb.GeoSegmentGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedGeoSegmentGroupsServer) Update(context.Context, *pb.GeoSegmentGroup) (*pb.GeoSegmentGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedGeoSegmentGroupsServer) Delete(context.Context, *pb.GeoSegmentGroup) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedGeoSegmentGroupsServer) GetByID(context.Context, *pb1.VersionIDRequest) (*pb.GeoSegmentGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (*UnimplementedGeoSegmentGroupsServer) GetEffective(context.Context, *pb1.IDRequest) (*pb.GeoSegmentGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEffective not implemented")
}
func (*UnimplementedGeoSegmentGroupsServer) ListEffective(*emptypb.Empty, GeoSegmentGroups_ListEffectiveServer) error {
	return status.Errorf(codes.Unimplemented, "method ListEffective not implemented")
}

func RegisterGeoSegmentGroupsServer(s *grpc.Server, srv GeoSegmentGroupsServer) {
	s.RegisterService(&_GeoSegmentGroups_serviceDesc, srv)
}

func _GeoSegmentGroups_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.GeoSegmentGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoSegmentGroupsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.location.grpc.GeoSegmentGroups/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoSegmentGroupsServer).Create(ctx, req.(*pb.GeoSegmentGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoSegmentGroups_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.GeoSegmentGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoSegmentGroupsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.location.grpc.GeoSegmentGroups/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoSegmentGroupsServer).Update(ctx, req.(*pb.GeoSegmentGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoSegmentGroups_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.GeoSegmentGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoSegmentGroupsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.location.grpc.GeoSegmentGroups/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoSegmentGroupsServer).Delete(ctx, req.(*pb.GeoSegmentGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoSegmentGroups_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb1.VersionIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoSegmentGroupsServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.location.grpc.GeoSegmentGroups/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoSegmentGroupsServer).GetByID(ctx, req.(*pb1.VersionIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoSegmentGroups_GetEffective_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb1.IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoSegmentGroupsServer).GetEffective(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.location.grpc.GeoSegmentGroups/GetEffective",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoSegmentGroupsServer).GetEffective(ctx, req.(*pb1.IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoSegmentGroups_ListEffective_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GeoSegmentGroupsServer).ListEffective(m, &geoSegmentGroupsListEffectiveServer{stream})
}

type GeoSegmentGroups_ListEffectiveServer interface {
	Send(*pb.GeoSegmentGroup) error
	grpc.ServerStream
}

type geoSegmentGroupsListEffectiveServer struct {
	grpc.ServerStream
}

func (x *geoSegmentGroupsListEffectiveServer) Send(m *pb.GeoSegmentGroup) error {
	return x.ServerStream.SendMsg(m)
}

var _GeoSegmentGroups_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.retail.location.grpc.GeoSegmentGroups",
	HandlerType: (*GeoSegmentGroupsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GeoSegmentGroups_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GeoSegmentGroups_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GeoSegmentGroups_Delete_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _GeoSegmentGroups_GetByID_Handler,
		},
		{
			MethodName: "GetEffective",
			Handler:    _GeoSegmentGroups_GetEffective_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListEffective",
			Handler:       _GeoSegmentGroups_ListEffective_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/location/service.proto",
}

// GeoSegmentsClient is the client API for GeoSegments service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GeoSegmentsClient interface {
	Create(ctx context.Context, in *pb.GeoSegment, opts ...grpc.CallOption) (*pb.GeoSegment, error)
	Update(ctx context.Context, in *pb.GeoSegment, opts ...grpc.CallOption) (*pb.GeoSegment, error)
	Delete(ctx context.Context, in *pb.GeoSegment, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetByID(ctx context.Context, in *pb1.VersionIDRequest, opts ...grpc.CallOption) (*pb.GeoSegment, error)
	GetEffective(ctx context.Context, in *pb1.IDRequest, opts ...grpc.CallOption) (*pb.GeoSegment, error)
	ListEffective(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (GeoSegments_ListEffectiveClient, error)
	FindByAbbreviationPath(ctx context.Context, in *fieldmaskpb.FieldMask, opts ...grpc.CallOption) (GeoSegments_FindByAbbreviationPathClient, error)
}

type geoSegmentsClient struct {
	cc grpc.ClientConnInterface
}

func NewGeoSegmentsClient(cc grpc.ClientConnInterface) GeoSegmentsClient {
	return &geoSegmentsClient{cc}
}

func (c *geoSegmentsClient) Create(ctx context.Context, in *pb.GeoSegment, opts ...grpc.CallOption) (*pb.GeoSegment, error) {
	out := new(pb.GeoSegment)
	err := c.cc.Invoke(ctx, "/google.retail.location.grpc.GeoSegments/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoSegmentsClient) Update(ctx context.Context, in *pb.GeoSegment, opts ...grpc.CallOption) (*pb.GeoSegment, error) {
	out := new(pb.GeoSegment)
	err := c.cc.Invoke(ctx, "/google.retail.location.grpc.GeoSegments/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoSegmentsClient) Delete(ctx context.Context, in *pb.GeoSegment, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/google.retail.location.grpc.GeoSegments/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoSegmentsClient) GetByID(ctx context.Context, in *pb1.VersionIDRequest, opts ...grpc.CallOption) (*pb.GeoSegment, error) {
	out := new(pb.GeoSegment)
	err := c.cc.Invoke(ctx, "/google.retail.location.grpc.GeoSegments/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoSegmentsClient) GetEffective(ctx context.Context, in *pb1.IDRequest, opts ...grpc.CallOption) (*pb.GeoSegment, error) {
	out := new(pb.GeoSegment)
	err := c.cc.Invoke(ctx, "/google.retail.location.grpc.GeoSegments/GetEffective", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoSegmentsClient) ListEffective(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (GeoSegments_ListEffectiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GeoSegments_serviceDesc.Streams[0], "/google.retail.location.grpc.GeoSegments/ListEffective", opts...)
	if err != nil {
		return nil, err
	}
	x := &geoSegmentsListEffectiveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GeoSegments_ListEffectiveClient interface {
	Recv() (*pb.GeoSegment, error)
	grpc.ClientStream
}

type geoSegmentsListEffectiveClient struct {
	grpc.ClientStream
}

func (x *geoSegmentsListEffectiveClient) Recv() (*pb.GeoSegment, error) {
	m := new(pb.GeoSegment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *geoSegmentsClient) FindByAbbreviationPath(ctx context.Context, in *fieldmaskpb.FieldMask, opts ...grpc.CallOption) (GeoSegments_FindByAbbreviationPathClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GeoSegments_serviceDesc.Streams[1], "/google.retail.location.grpc.GeoSegments/FindByAbbreviationPath", opts...)
	if err != nil {
		return nil, err
	}
	x := &geoSegmentsFindByAbbreviationPathClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GeoSegments_FindByAbbreviationPathClient interface {
	Recv() (*pb.GeoSegment, error)
	grpc.ClientStream
}

type geoSegmentsFindByAbbreviationPathClient struct {
	grpc.ClientStream
}

func (x *geoSegmentsFindByAbbreviationPathClient) Recv() (*pb.GeoSegment, error) {
	m := new(pb.GeoSegment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GeoSegmentsServer is the server API for GeoSegments service.
type GeoSegmentsServer interface {
	Create(context.Context, *pb.GeoSegment) (*pb.GeoSegment, error)
	Update(context.Context, *pb.GeoSegment) (*pb.GeoSegment, error)
	Delete(context.Context, *pb.GeoSegment) (*emptypb.Empty, error)
	GetByID(context.Context, *pb1.VersionIDRequest) (*pb.GeoSegment, error)
	GetEffective(context.Context, *pb1.IDRequest) (*pb.GeoSegment, error)
	ListEffective(*emptypb.Empty, GeoSegments_ListEffectiveServer) error
	FindByAbbreviationPath(*fieldmaskpb.FieldMask, GeoSegments_FindByAbbreviationPathServer) error
}

// UnimplementedGeoSegmentsServer can be embedded to have forward compatible implementations.
type UnimplementedGeoSegmentsServer struct {
}

func (*UnimplementedGeoSegmentsServer) Create(context.Context, *pb.GeoSegment) (*pb.GeoSegment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedGeoSegmentsServer) Update(context.Context, *pb.GeoSegment) (*pb.GeoSegment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedGeoSegmentsServer) Delete(context.Context, *pb.GeoSegment) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedGeoSegmentsServer) GetByID(context.Context, *pb1.VersionIDRequest) (*pb.GeoSegment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (*UnimplementedGeoSegmentsServer) GetEffective(context.Context, *pb1.IDRequest) (*pb.GeoSegment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEffective not implemented")
}
func (*UnimplementedGeoSegmentsServer) ListEffective(*emptypb.Empty, GeoSegments_ListEffectiveServer) error {
	return status.Errorf(codes.Unimplemented, "method ListEffective not implemented")
}
func (*UnimplementedGeoSegmentsServer) FindByAbbreviationPath(*fieldmaskpb.FieldMask, GeoSegments_FindByAbbreviationPathServer) error {
	return status.Errorf(codes.Unimplemented, "method FindByAbbreviationPath not implemented")
}

func RegisterGeoSegmentsServer(s *grpc.Server, srv GeoSegmentsServer) {
	s.RegisterService(&_GeoSegments_serviceDesc, srv)
}

func _GeoSegments_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.GeoSegment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoSegmentsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.location.grpc.GeoSegments/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoSegmentsServer).Create(ctx, req.(*pb.GeoSegment))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoSegments_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.GeoSegment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoSegmentsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.location.grpc.GeoSegments/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoSegmentsServer).Update(ctx, req.(*pb.GeoSegment))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoSegments_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.GeoSegment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoSegmentsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.location.grpc.GeoSegments/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoSegmentsServer).Delete(ctx, req.(*pb.GeoSegment))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoSegments_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb1.VersionIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoSegmentsServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.location.grpc.GeoSegments/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoSegmentsServer).GetByID(ctx, req.(*pb1.VersionIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoSegments_GetEffective_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb1.IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoSegmentsServer).GetEffective(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.retail.location.grpc.GeoSegments/GetEffective",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoSegmentsServer).GetEffective(ctx, req.(*pb1.IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoSegments_ListEffective_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GeoSegmentsServer).ListEffective(m, &geoSegmentsListEffectiveServer{stream})
}

type GeoSegments_ListEffectiveServer interface {
	Send(*pb.GeoSegment) error
	grpc.ServerStream
}

type geoSegmentsListEffectiveServer struct {
	grpc.ServerStream
}

func (x *geoSegmentsListEffectiveServer) Send(m *pb.GeoSegment) error {
	return x.ServerStream.SendMsg(m)
}

func _GeoSegments_FindByAbbreviationPath_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(fieldmaskpb.FieldMask)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GeoSegmentsServer).FindByAbbreviationPath(m, &geoSegmentsFindByAbbreviationPathServer{stream})
}

type GeoSegments_FindByAbbreviationPathServer interface {
	Send(*pb.GeoSegment) error
	grpc.ServerStream
}

type geoSegmentsFindByAbbreviationPathServer struct {
	grpc.ServerStream
}

func (x *geoSegmentsFindByAbbreviationPathServer) Send(m *pb.GeoSegment) error {
	return x.ServerStream.SendMsg(m)
}

var _GeoSegments_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.retail.location.grpc.GeoSegments",
	HandlerType: (*GeoSegmentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GeoSegments_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GeoSegments_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GeoSegments_Delete_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _GeoSegments_GetByID_Handler,
		},
		{
			MethodName: "GetEffective",
			Handler:    _GeoSegments_GetEffective_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListEffective",
			Handler:       _GeoSegments_ListEffective_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindByAbbreviationPath",
			Handler:       _GeoSegments_FindByAbbreviationPath_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/location/service.proto",
}
